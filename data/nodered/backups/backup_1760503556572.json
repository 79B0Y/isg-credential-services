{
  "flows": [
    {
      "id": "f154d9b8aa3f1a9f",
      "type": "tab",
      "label": "Agent Flow v1.0.0",
      "disabled": false,
      "info": "Agent Workflow v1.0.0 - Telegram智能家居控制流程",
      "env": []
    },
    {
      "id": "73840c3923b28da6",
      "type": "tab",
      "label": "流程 2",
      "disabled": false,
      "info": "",
      "env": []
    },
    {
      "id": "b604667dbd733022",
      "type": "websocket-listener",
      "path": "ws://localhost:8080",
      "wholemsg": "false"
    },
    {
      "id": "6e11d670ca599080",
      "type": "websocket-listener",
      "path": "ws://localhost:8080",
      "wholemsg": "false"
    },
    {
      "id": "5416e0b9b78d5c8d",
      "type": "switch",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "property": "payload.type",
      "propertyType": "msg",
      "rules": [
        {
          "t": "eq",
          "v": "text",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "voice",
          "vt": "str"
        }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 670,
      "y": 280,
      "wires": [
        [
          "2d384bf4d9111e14"
        ],
        [
          "355ca8cdea3961ec"
        ]
      ]
    },
    {
      "id": "2c58f9d0a5dee506",
      "type": "json",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": false,
      "x": 550,
      "y": 280,
      "wires": [
        [
          "5416e0b9b78d5c8d",
          "22b9c0ed05ac8485"
        ]
      ]
    },
    {
      "id": "5443666aa638af85",
      "type": "websocket in",
      "z": "f154d9b8aa3f1a9f",
      "name": "Telegram Message",
      "server": "6e11d670ca599080",
      "client": "",
      "x": 310,
      "y": 280,
      "wires": [
        []
      ]
    },
    {
      "id": "22b9c0ed05ac8485",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "查询家庭房间",
      "method": "GET",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/rooms",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 700,
      "y": 220,
      "wires": [
        [
          "83097a30633a0a6b"
        ]
      ]
    },
    {
      "id": "96d91e963806344b",
      "type": "join",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "mode": "custom",
      "build": "array",
      "property": "payload",
      "propertyType": "msg",
      "key": "topic",
      "joiner": "\\n",
      "joinerType": "str",
      "useparts": false,
      "accumulate": false,
      "timeout": "",
      "count": "2",
      "reduceRight": false,
      "reduceExp": "",
      "reduceInit": "",
      "reduceInitType": "",
      "reduceFixup": "",
      "x": 1150,
      "y": 280,
      "wires": [
        [
          "ca05d4acf2efc4f2"
        ]
      ]
    },
    {
      "id": "2d384bf4d9111e14",
      "type": "json",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 970,
      "y": 280,
      "wires": [
        [
          "96d91e963806344b"
        ]
      ]
    },
    {
      "id": "46ad0866f55f0614",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "提取语音文字",
      "func": " const inputData = JSON.parse(msg.payload);\n    \n    // 提取text字段\n    const textContent = inputData.data.text;\n    \n    // 构造输出对象\n    msg.payload = {\n        content: textContent\n    };\n    \n    return msg;\n    ",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1000,
      "y": 340,
      "wires": [
        [
          "96d91e963806344b"
        ]
      ]
    },
    {
      "id": "9809eb9ddde9f9f4",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "Whisper",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/openai/openai/transcribe-url",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 820,
      "y": 340,
      "wires": [
        [
          "46ad0866f55f0614"
        ]
      ]
    },
    {
      "id": "bfbd35c8f2bad87a",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "OpenAI 意图转换",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/openai/openai/simple-chat",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 1450,
      "y": 280,
      "wires": [
        [
          "ab0e39ba3922893c",
          "14f423c57f0ba1d6"
        ]
      ]
    },
    {
      "id": "355ca8cdea3961ec",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "语音提示词",
      "func": "const audioUrl = msg.payload.content;\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nmsg.payload = {\n    \"audio_url\": audioUrl,\n    \"model\": \"whisper-1\",\n    \"language\": null, // 自动检测\n    \"response_format\": \"json\"\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 650,
      "y": 340,
      "wires": [
        [
          "9809eb9ddde9f9f4"
        ]
      ]
    },
    {
      "id": "ab0e39ba3922893c",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "转换JSON文件",
      "func": "// Function Node 代码 - 提取并整理AI回复内容\nfunction extractAIResponse(msg) {\n    try {\n        // 解析输入的JSON数据\n        let inputData;\n        if (typeof msg.payload === 'string') {\n            inputData = JSON.parse(msg.payload);\n        } else {\n            inputData = msg.payload;\n        }\n        \n        // 检查数据结构是否正确\n        if (!inputData.success || !inputData.data || !inputData.data.choices) {\n            throw new Error('Invalid response structure');\n        }\n        \n        // 提取AI回复的内容\n        const aiResponse = inputData.data.choices[0].message.content;\n        \n        // 解析AI回复的JSON内容\n        const parsedResponse = JSON.parse(aiResponse);\n        \n        // 整理成标准格式\n        const organizedData = {\n            // 基本信息\n            intent: parsedResponse.intent || null,\n            confidence: parsedResponse.confidence || null,\n            user_input: parsedResponse.user_input || null,\n            \n            // 识别结果\n            matched_rooms: parsedResponse.matched_rooms || [],\n            device_types: parsedResponse.device_types || [],\n            \n            // 设备控制信息\n            devices: parsedResponse.devices ? parsedResponse.devices.map(device => ({\n                room_name: device.room_name || null,\n                device_type: device.device_type || null,\n                device_name: device.device_name || null,\n                action: device.action || null,\n                service: device.service || null,\n                data: device.data || {}\n            })) : []\n        };\n        \n        // 输出整理后的数据\n        msg.payload = organizedData;\n        \n        // 可选：将原始数据保存在另一个属性中\n        msg.original_response = inputData;\n        \n        return msg;\n        \n    } catch (error) {\n        // 错误处理\n        msg.payload = {\n            error: true,\n            message: error.message,\n            original_payload: msg.payload\n        };\n        \n        node.error(\"Failed to extract AI response: \" + error.message, msg);\n        return msg;\n    }\n}\n\n// 调用函数\nreturn extractAIResponse(msg);",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1640,
      "y": 280,
      "wires": [
        [
          "90c591f3a7b13003"
        ]
      ]
    },
    {
      "id": "90c591f3a7b13003",
      "type": "switch",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "property": "payload.intent",
      "propertyType": "msg",
      "rules": [
        {
          "t": "eq",
          "v": "Query Device Status",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Control Device",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Control Scene",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Set Scene",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Set Automation",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Other",
          "vt": "str"
        }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 6,
      "x": 1790,
      "y": 280,
      "wires": [
        [
          "72fc6e1e6ac5b1a7"
        ],
        [
          "1e39ee6d8e8a358b"
        ],
        [],
        [],
        [],
        []
      ]
    },
    {
      "id": "ca05d4acf2efc4f2",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "AI提示词",
      "func": "// 优化的数据提取函数\nfunction extractData(payload) {\n    let messageData = null;\n    let roomData = null;\n\n    if (!Array.isArray(payload)) {\n        return { error: \"输入数据不是数组格式\" };\n    }\n\n    // 遍历数组，根据属性识别对象类型\n    for (let i = 0; i < payload.length; i++) {\n        const item = payload[i];\n\n        // 识别消息对象（包含 content 字段）\n        if (item && typeof item === 'object' && item.content !== undefined) {\n            messageData = item;\n            continue;\n        }\n\n        // 识别房间数组（直接是数组且包含 name 和 floor_name）\n        if (Array.isArray(item) && item.length > 0 && \n            item[0].name !== undefined && item[0].floor_name !== undefined) {\n            roomData = item;\n            continue;\n        }\n\n        // 识别包含 rooms 数据的对象\n        if (item && typeof item === 'object' && item.data && Array.isArray(item.data.rooms)) {\n            roomData = item.data.rooms;\n            continue;\n        }\n    }\n\n    // 检查是否成功获取到所需数据\n    if (!messageData) {\n        return { error: \"无法找到消息数据\" };\n    }\n\n    if (!roomData) {\n        return { error: \"无法找到房间数据\" };\n    }\n\n    return {\n        success: true,\n        message: {\n            content: messageData.content || \"\",\n            chat_id: messageData.chat_id || null,\n            from_name: messageData.from_name || \"\",\n            timestamp: messageData.timestamp || \"\"\n        },\n        rooms: roomData\n    };\n}\n\n// Node-RED Function Node 使用\nconst result = extractData(msg.payload);\n\nif (!result.success) {\n    node.error(result.error, msg);\n    return null;\n}\n\n// 构建输出消息\nconst inputText = result.message.content;\nconst haRoom = result.rooms;\n\n// 构建用户输入\nconst userPrompt = `用户指令: ${inputText}\n\n可用房间: ${JSON.stringify(haRoom, null, 2)}\n\n请分析用户指令并返回对应的房间控制命令。`;\n\n\n// 设置请求头\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// 构建请求负载\nmsg.payload = {\n    \"system_prompt\": `你是Home Assistant智能家居指令解析专家。分析用户自然语言指令，提取房间、设备信息，判断意图并转换为Home Assistant服务调用。\n\n## 意图分类（六种类型）\n1. Query Device Status（查询设备状态）\n2. Control Device（控制设备）\n3. Control Scene（场景控制）\n4. Set Scene（设定场景）\n5. Set Automation（设定自动化）\n6. Other（其他）\n\n## 房间匹配规则\n**优先级顺序**：\n1. **精确匹配**：优先匹配可用房间列表中的确切房间名称\n2. **模糊匹配**：如果用户使用通用空间名称，按以下规则匹配：\n   - 客厅/大厅/会客厅/起居室 → 匹配包含\"Living Room\"的房间\n   - **卧室/睡房** → 匹配包含\"Bedroom\"的所有房间\n   - **主卧/主卧室** → 仅匹配\"Master Bedroom\"\n   - **次卧/客卧** → 匹配除\"Master Bedroom\"外的其他\"Bedroom\"房间\n   - 书房/办公室/工作室/学习室 → 匹配包含\"Study\"的房间\n   - 厨房/烹饪间 → 匹配包含\"Kitchen\"的房间\n   - 餐厅/饭厅/用餐区 → 匹配包含\"Dining\"的房间\n   - 卫生间/洗手间/厕所/浴室 → 匹配包含\"Bathroom\"的房间\n   - 阳台/露台/平台 → 匹配包含\"Balcony\"的房间\n   - 花园/后院/前院/庭院 → 匹配包含\"Garden\"的房间\n   - 车库/停车库 → 匹配包含\"Garage\"的房间\n   - 走廊/过道/通道 → 匹配包含\"Hallway\"的房间\n3. 如果用户没有说任何房间，则匹配所有房间\n4. 如果用户说楼层，则匹配该楼层所有房间\n\n## 设备类型映射（Home Assistant域名）\n- 灯/台灯/吊灯/射灯/筒灯/照明灯 → light\n- 空调/冷气/制冷机 → climate\n- 风扇/吊扇/台扇/电扇 → fan\n- 电视/TV/显示器 → media_player\n- 音响/音箱/扬声器 → media_player\n- 窗帘/百叶窗/遮光帘 → cover\n- 开关/插座 → switch\n- 温度计/温度传感器 → sensor\n- 湿度计/湿度传感器 → sensor\n- 人体感应器/移动传感器/运动传感器 → binary_sensor\n\n## 参数提取和动作映射规则\n\n### 灯光控制参数：\n- **颜色参数**：红色→{\"color_name\": \"red\"}，蓝色→{\"color_name\": \"blue\"}，绿色→{\"color_name\": \"green\"}，白色→{\"color_name\": \"white\"}，黄色→{\"color_name\": \"yellow\"}，紫色→{\"color_name\": \"purple\"}，橙色→{\"color_name\": \"orange\"}，粉色→{\"color_name\": \"pink\"}\n- **亮度参数**：X%→{\"brightness_pct\": X}，最亮→{\"brightness_pct\": 100}，最暗→{\"brightness_pct\": 1}，亮一点→{\"brightness_pct\": 80}，暗一点→{\"brightness_pct\": 20}\n- **色温参数**：暖光→{\"color_temp\": 3000}，冷光→{\"color_temp\": 6500}，自然光→{\"color_temp\": 4000}\n\n### 空调控制参数：\n- **温度参数**：X度→{\"temperature\": X}，调高→{\"temperature\": 25}，调低→{\"temperature\": 20}\n- **模式参数**：制冷→{\"hvac_mode\": \"cool\"}，制热→{\"hvac_mode\": \"heat\"}，通风→{\"hvac_mode\": \"fan_only\"}，自动→{\"hvac_mode\": \"auto\"}\n\n### 风扇控制参数：\n- **速度参数**：低速→{\"percentage\": 33}，中速→{\"percentage\": 66}，高速→{\"percentage\": 100}，X档→{\"percentage\": X*20}\n\n### 窗帘控制参数：\n- **位置参数**：开一半→{\"position\": 50}，全开→{\"position\": 100}，全关→{\"position\": 0}\n\n## 动作翻译规则（中文→英文）\n### 基础动作：\n- 打开/开启/启动 → Turn On\n- 关闭/关掉/停止 → Turn Off\n- 查询/检查/看看 → Check Status\n\n### 复合动作（包含参数）：\n- 打开并设置颜色 → Turn On and Set Color\n- 打开并设置亮度 → Turn On and Set Brightness  \n- 打开并设置颜色和亮度 → Turn On and Set Color and Brightness\n- 调节温度 → Set Temperature\n- 调节亮度 → Set Brightness\n- 设置颜色 → Set Color\n- 调节速度 → Set Speed\n- 设置位置 → Set Position\n\n### 服务映射：\n- 灯光：turn_on, turn_off\n- 空调：set_temperature, set_hvac_mode, turn_on, turn_off\n- 风扇：set_percentage, turn_on, turn_off\n- 窗帘：set_cover_position, open_cover, close_cover\n\n## 参数提取示例：\n**输入**：\"打开卧室的灯，都调成红色，亮度50%\"\n**输出data**：{\"color_name\": \"red\", \"brightness_pct\": 50}\n**action**：\"Turn On and Set Color and Brightness\"\n\n**输入**：\"把客厅空调温度调到22度\"\n**输出data**：{\"temperature\": 22}\n**action**：\"Set Temperature\"\n\n**输入**：\"关闭书房的灯\"\n**输出data**：{}\n**action**：\"Turn Off\"\n\n## 意图分类规则\n- **Control Device**：用户明确指定设备和动作（如：\"打开客厅灯\"、\"关闭书房空调\"）\n- **Control Scene**：用户使用场景关键词（如：\"启动/执行/开启XX模式/场景\"）\n- **Query Device Status**：用户询问设备状态（如：\"客厅灯开着吗\"、\"空调温度是多少\"）\n\n### 对于设备控制类指令：\n{\n    \"intent\": \"Control Device|Query Device Status|Control Scene|Set Scene|Set Automation|Other\",\n    \"confidence\": 0.95,\n    \"user_input\": \"用户原始输入\",\n    \"matched_rooms\": [\"实际房间名1\", \"实际房间名2\"],\n    \"device_types\": [\"light\", \"climate\", \"fan\", \"media_player\", \"cover\", \"switch\"],\n    \"devices\": [\n        {\n            \"room_name\": \"实际房间名1\",\n            \"device_type\": \"Home Assistant域名\",\n            \"device_name\": \"用户说的设备名称，并翻译成英文，示例：打开落地灯，设备名称 - floor light\",\n            \"action\": \"精确的英文动作描述（包含所有参数信息）\",\n            \"service\": \"turn_on|turn_off|set_temperature|set_brightness|set_color\",\n            \"data\": {\"具体参数名\": \"具体参数值\", \"color_name\": \"red\", \"brightness_pct\": 50}\n        }\n    ],\n    \"ai_respond\": \"根据用户的原始输入进行回答（收到指令，即将执行用户的指令），并保持与用户的原始输入语言一致\"\n}\n\n### 对于场景控制类指令：\n{\n    \"intent\": \"Control Scene\", \n    \"confidence\": 0.9,\n    \"user_input\": \"用户原始输入\",\n    \"scene_name\": \"场景名称\",\n    \"matched_rooms\": [],\n    \"device_types\": [],\n    \"devices\": [],\n    \"ai_respond\": \"根据用户的原始输入进行回答（收到指令，即将执行用户的指令），并保持与用户的原始输入语言一致\"\n}\n\n### 对于状态查询类指令（重要 - 必须生成完整设备矩阵）：\n{\n    \"intent\": \"Query Device Status\",\n    \"confidence\": 0.9,\n    \"user_input\": \"用户原始输入\", \n    \"matched_rooms\": [\"房间1\", \"房间2\", \"房间3\"],\n    \"device_types\": [\"light\", \"climate\", \"fan\", \"media_player\", \"cover\", \"switch\", \"sensor\", \"binary_sensor\"],\n    \"devices\": [\n        // 严格按照以下模式生成：为每个matched_rooms中的房间，生成8个设备查询条目\n        // 房间1的所有设备类型\n        {\"room_name\": \"房间1\", \"device_type\": \"light\", \"device_name\": \"light\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"climate\", \"device_name\": \"climate\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"fan\", \"device_name\": \"fan\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"media_player\", \"device_name\": \"media_player\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"cover\", \"device_name\": \"cover\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"switch\", \"device_name\": \"switch\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"sensor\", \"device_name\": \"sensor\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间1\", \"device_type\": \"binary_sensor\", \"device_name\": \"binary_sensor\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        // 房间2的所有设备类型\n        {\"room_name\": \"房间2\", \"device_type\": \"light\", \"device_name\": \"light\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        {\"room_name\": \"房间2\", \"device_type\": \"climate\", \"device_name\": \"climate\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}},\n        // ... 继续为房间2生成剩余6种设备类型\n        // 房间3的所有设备类型 - 重复相同模式\n        // ... \n        // 总数量 = matched_rooms数量 × 8种设备类型\n    ],\n    \"ai_respond\": \"根据用户的原始输入进行回答，保持与用户的原始输入语言一致\"\n}\n\n## 重要要求\n1. **必须提取所有参数**：仔细分析用户输入中的颜色、亮度、温度、速度等参数，全部提取到data字段\n2. **action字段必须准确**：根据用户的完整意图组合动作名称，如\"Turn On and Set Color and Brightness\"\n3. **data字段不能为空**：如果用户提到了参数（颜色、亮度等），必须在data中体现\n4. **设备状态查询的完整性要求（强制执行）**：\n   - ⚠️ 当意图为\"Query Device Status\"时，这是强制要求，不可省略\n   - device_types数组必须包含完整的8种设备类型：[\"light\", \"climate\", \"fan\", \"media_player\", \"cover\", \"switch\", \"sensor\", \"binary_sensor\"]\n   - devices数组必须按照严格的矩阵模式生成：\n     * 遍历matched_rooms中的每个房间\n     * 为每个房间生成8个设备查询条目（对应8种设备类型）\n     * 每个条目格式固定：\"room_name\": \"房间名\", \"device_type\": \"设备类型\", \"device_name\": \"设备类型\", \"action\": \"Check Status\", \"service\": \"get_state\", \"data\": {}\n   - 计算公式：devices数组长度 = matched_rooms数量 × 8\n   - 示例：9个房间 × 8种设备 = 72个devices条目\n   - ⚠️ 如果devices数组长度不等于matched_rooms数量×8，则输出不符合要求\n5. 必须使用可用房间列表中的实际房间名称\n6. 当用户使用通用房间名称（如\"卧室\"）且有多个匹配房间时，**必须在matched_rooms中包含所有匹配的房间**\n7. devices数组中应为每个匹配房间创建相应的设备条目\n8. device_type必须使用Home Assistant域名\n9. 输出必须是有效JSON格式\n10. ai_respond的语言需要与用户原始输入的语言一致,如果原始输入语言为英文，则ai_respond也用英文。\n   要有礼貌的回复\n   - 示例：“好的，即将为您打开主卧灯”`,\n    \n    \"user_prompt\": userPrompt,\n    \n    \"options\": {\n        \"model\": \"gpt-3.5-turbo\",\n        \"temperature\": 0.3,\n        \"max_tokens\": 2000\n    }\n};\n\n// 添加调试信息（可选）\nmsg.debug = {\n    \"user_input\": inputText,\n    \"available_rooms\": haRoom,\n    \"timestamp\": new Date().toISOString()\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1280,
      "y": 280,
      "wires": [
        [
          "bfbd35c8f2bad87a"
        ]
      ]
    },
    {
      "id": "058a62f3f7f4c4eb",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "设备控制",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/batch-control",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 2460,
      "y": 260,
      "wires": [
        []
      ]
    },
    {
      "id": "06a06c610bfe3e77",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "查找设备ID",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/match-devices",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 2090,
      "y": 260,
      "wires": [
        [
          "99bd88dd331258f6",
          "b9b90361f8f9b537"
        ]
      ]
    },
    {
      "id": "1e39ee6d8e8a358b",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "设备控制",
      "func": "// Node-RED Function Node - 提取devices并输出JSON对象\n// 输入: msg.payload 包含完整的智能家居控制数据\n// 输出: msg.payload 只包含devices数组的JSON对象\n\n// 检查输入数据是否存在\nif (!msg.payload) {\n    node.error(\"输入数据为空\", msg);\n    return null;\n}\n\ntry {\n    // 解析输入数据（如果是字符串）\n    let inputData;\n    if (typeof msg.payload === 'string') {\n        inputData = JSON.parse(msg.payload);\n    } else {\n        inputData = msg.payload;\n    }\n    \n    // 检查是否包含devices字段\n    if (!inputData.devices || !Array.isArray(inputData.devices)) {\n        node.warn(\"输入数据中没有找到devices数组\");\n        msg.payload = { devices: [] };\n        return msg;\n    }\n    \n    // 直接输出devices数组\n    msg.payload = inputData.devices;\n    \n    // 记录处理信息\n    node.log(`成功提取 ${inputData.devices.length} 个设备`);\n    \n    return msg;\n    \n} catch (error) {\n    node.error(\"处理数据时出错: \" + error.message, msg);\n    return null;\n}",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1940,
      "y": 260,
      "wires": [
        [
          "06a06c610bfe3e77"
        ]
      ]
    },
    {
      "id": "99bd88dd331258f6",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "组织控制指令",
      "func": "// Node-RED Function Node - 转换为Home Assistant标准指令格式\n// 优化版本：处理matched_entities和entity_id提取\n\n// 安全的属性访问函数\nfunction safeGet(obj, path, defaultValue = null) {\n    try {\n        return path.split('.').reduce((current, key) => current && current[key], obj) || defaultValue;\n    } catch (e) {\n        return defaultValue;\n    }\n}\n\n// 记录调试信息\nnode.log(\"=== 开始处理数据 ===\");\nnode.log(\"输入类型: \" + typeof msg.payload);\n\n// 检查基本输入\nif (!msg.payload) {\n    node.error(\"msg.payload为空\", msg);\n    return null;\n}\n\nlet inputData;\ntry {\n    // 处理输入数据\n    if (typeof msg.payload === 'string') {\n        inputData = JSON.parse(msg.payload);\n        node.log(\"解析JSON字符串成功\");\n    } else if (typeof msg.payload === 'object') {\n        inputData = msg.payload;\n        node.log(\"直接使用对象数据\");\n    } else {\n        node.error(\"不支持的数据类型: \" + typeof msg.payload, msg);\n        return null;\n    }\n} catch (parseError) {\n    node.error(\"JSON解析失败: \" + parseError.message, msg);\n    return null;\n}\n\n// 安全检查数据结构\nnode.log(\"检查数据结构...\");\nconst success = safeGet(inputData, 'success');\nconst data = safeGet(inputData, 'data');\nconst commands = safeGet(inputData, 'data.commands');\n\nnode.log(\"success: \" + success);\nnode.log(\"data存在: \" + (data !== null));\nnode.log(\"commands存在: \" + (commands !== null));\nnode.log(\"commands是数组: \" + Array.isArray(commands));\n\nif (!success) {\n    node.error(\"success字段为false或不存在\", msg);\n    return null;\n}\n\nif (!data) {\n    node.error(\"data字段不存在\", msg);\n    node.log(\"输入数据的键: \" + JSON.stringify(Object.keys(inputData || {})));\n    return null;\n}\n\nif (!Array.isArray(commands)) {\n    node.error(\"commands字段不存在或不是数组\", msg);\n    node.log(\"data对象的键: \" + JSON.stringify(Object.keys(data || {})));\n    return null;\n}\n\nnode.log(\"找到 \" + commands.length + \" 个命令\");\n\n// 设备类型映射配置\nconst deviceMappings = {\n    light: {\n        services: {\n            \"turn_on\": \"turn_on\",\n            \"turn_off\": \"turn_off\",\n            \"toggle\": \"toggle\",\n            \"dim\": \"turn_on\",\n            \"brighten\": \"turn_on\",\n            \"set_brightness\": \"turn_on\"\n        },\n        dataMapping: {\n            \"brightness_pct\": (value) => ({ \"brightness\": Math.round(value * 255 / 100) }),\n            \"brightness\": (value) => ({ \"brightness\": Math.max(0, Math.min(255, value)) }),\n            \"color_name\": (value) => ({ \"color_name\": value }),\n            \"rgb_color\": (value) => ({ \"rgb_color\": value }),\n            \"hs_color\": (value) => ({ \"hs_color\": value }),\n            \"color_temp\": (value) => ({ \"color_temp\": value }),\n            \"kelvin\": (value) => ({ \"kelvin\": value }),\n            \"effect\": (value) => ({ \"effect\": value })\n        }\n    },\n    switch: {\n        services: {\n            \"turn_on\": \"turn_on\",\n            \"turn_off\": \"turn_off\",\n            \"toggle\": \"toggle\"\n        },\n        dataMapping: {}\n    },\n    fan: {\n        services: {\n            \"turn_on\": \"turn_on\",\n            \"turn_off\": \"turn_off\",\n            \"toggle\": \"toggle\",\n            \"set_speed\": \"set_percentage\"\n        },\n        dataMapping: {\n            \"speed\": (value) => ({ \"percentage\": Math.round(value * 10) }),\n            \"percentage\": (value) => ({ \"percentage\": Math.max(0, Math.min(100, value)) })\n        }\n    },\n    climate: {\n        services: {\n            \"turn_on\": \"turn_on\",\n            \"turn_off\": \"turn_off\",\n            \"set_temperature\": \"set_temperature\",\n            \"set_hvac_mode\": \"set_hvac_mode\"\n        },\n        dataMapping: {\n            \"temperature\": (value) => ({ \"temperature\": value }),\n            \"target_temp_high\": (value) => ({ \"target_temp_high\": value }),\n            \"target_temp_low\": (value) => ({ \"target_temp_low\": value }),\n            \"hvac_mode\": (value) => ({ \"hvac_mode\": value })\n        }\n    },\n    cover: {\n        services: {\n            \"open\": \"open_cover\",\n            \"close\": \"close_cover\",\n            \"stop\": \"stop_cover\",\n            \"set_position\": \"set_cover_position\"\n        },\n        dataMapping: {\n            \"position\": (value) => ({ \"position\": Math.max(0, Math.min(100, value)) })\n        }\n    },\n    media_player: {\n        services: {\n            \"turn_on\": \"turn_on\",\n            \"turn_off\": \"turn_off\",\n            \"play\": \"media_play\",\n            \"pause\": \"media_pause\",\n            \"stop\": \"media_stop\",\n            \"set_volume\": \"volume_set\"\n        },\n        dataMapping: {\n            \"volume_level\": (value) => ({ \"volume_level\": Math.max(0, Math.min(1, value / 100)) })\n        }\n    }\n};\n\n// 处理命令\nconst haCommands = [];\n\ntry {\n    for (let i = 0; i < commands.length; i++) {\n        const command = commands[i];\n        node.log(`处理命令 ${i + 1}: ${command.device_type} - ${command.action}`);\n        \n        const deviceType = safeGet(command, 'device_type');\n        const service = safeGet(command, 'service');\n        const data = safeGet(command, 'data', {});\n        const matchedEntities = safeGet(command, 'matched_entities', []);\n        \n        // 检查必要字段\n        if (!deviceType || !service) {\n            node.warn(`命令 ${i + 1} 缺少必要字段 device_type 或 service，跳过`);\n            continue;\n        }\n        \n        // 获取设备映射配置\n        const deviceConfig = deviceMappings[deviceType];\n        if (!deviceConfig) {\n            node.warn(`不支持的设备类型: ${deviceType}`);\n            continue;\n        }\n        \n        // 处理entity_id：优先使用command.entity_id，如果为null则从matched_entities获取\n        let entityId = safeGet(command, 'entity_id');\n        let deviceName = safeGet(command, 'device_name');\n        \n        if (!entityId && Array.isArray(matchedEntities) && matchedEntities.length > 0) {\n            // 从matched_entities中提取信息，为每个匹配的实体创建命令\n            for (let j = 0; j < matchedEntities.length; j++) {\n                const entity = matchedEntities[j];\n                const currentEntityId = safeGet(entity, 'entity_id');\n                const currentDeviceName = safeGet(entity, 'device_name') || safeGet(entity, 'name');\n                \n                if (!currentEntityId) {\n                    node.warn(`匹配的实体 ${j + 1} 缺少 entity_id，跳过`);\n                    continue;\n                }\n                \n                // 创建HA命令\n                const haCommand = createHACommand(\n                    currentEntityId,\n                    currentDeviceName || `Entity ${j + 1}`,\n                    service,\n                    data,\n                    command.action,\n                    deviceType,\n                    deviceConfig\n                );\n                \n                if (haCommand) {\n                    haCommands.push(haCommand);\n                    node.log(`为实体 ${currentEntityId} 创建命令成功`);\n                }\n            }\n        } else if (entityId) {\n            // 直接使用提供的entity_id\n            const haCommand = createHACommand(\n                entityId,\n                deviceName || \"Unknown Device\",\n                service,\n                data,\n                command.action,\n                deviceType,\n                deviceConfig\n            );\n            \n            if (haCommand) {\n                haCommands.push(haCommand);\n                node.log(`为实体 ${entityId} 创建命令成功`);\n            }\n        } else {\n            node.warn(`命令 ${i + 1} 没有有效的 entity_id 或 matched_entities，跳过`);\n        }\n    }\n    \n    // 创建HA命令的函数\n    function createHACommand(entityId, deviceName, service, data, action, deviceType, deviceConfig) {\n        // 映射服务名称\n        const haService = deviceConfig.services[service] || service;\n        \n        // 构建HA命令对象\n        const haCommand = {\n            entity_id: entityId,\n            device_name: deviceName,\n            service: haService,\n            data: {}\n        };\n        \n        // 转换数据字段\n        for (const [key, value] of Object.entries(data)) {\n            const mapper = deviceConfig.dataMapping[key];\n            if (mapper && typeof mapper === 'function') {\n                const mappedData = mapper(value);\n                Object.assign(haCommand.data, mappedData);\n            } else {\n                haCommand.data[key] = value;\n            }\n        }\n        \n        // 特殊处理：根据action进行额外的数据处理\n        if (action && deviceType === 'light') {\n            const actionLower = action.toLowerCase();\n            if ((actionLower.includes('dim') || actionLower.includes('暗')) && !haCommand.data.brightness) {\n                haCommand.data.brightness = 128; // 默认50%亮度\n            }\n            if ((actionLower.includes('bright') || actionLower.includes('亮')) && !haCommand.data.brightness) {\n                haCommand.data.brightness = 255; // 全亮\n            }\n        }\n        \n        // 如果data为空对象，移除该字段以简化输出\n        if (Object.keys(haCommand.data).length === 0) {\n            delete haCommand.data;\n        }\n        \n        return haCommand;\n    }\n    \n    // 设置输出\n    msg.payload = haCommands;\n    \n    node.log(`=== 处理完成，生成 ${haCommands.length} 个HA命令 ===`);\n    \n    // 输出调试信息\n    if (haCommands.length > 0) {\n        node.log(\"输出预览: \" + JSON.stringify(haCommands[0], null, 2));\n    }\n    \n    return msg;\n    \n} catch (error) {\n    node.error(\"处理命令时出错: \" + error.message, msg);\n    node.error(\"错误堆栈: \" + error.stack);\n    return null;\n}",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2280,
      "y": 260,
      "wires": [
        [
          "058a62f3f7f4c4eb"
        ]
      ]
    },
    {
      "id": "7e430c5230e0b66a",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "提取用户回复",
      "func": "// Node-RED Function Node - 提取ai_respond字段\n// 输入: OpenAI API响应格式的数据\n// 输出: {\"text\": \"响应内容\"} 或错误消息\n\n// 安全的属性访问函数\nfunction safeGet(obj, path, defaultValue = null) {\n    try {\n        return path.split('.').reduce((current, key) => current && current[key], obj) || defaultValue;\n    } catch (e) {\n        return defaultValue;\n    }\n}\n\n// 默认错误响应\nconst errorResponse = {\"text\": \"Sorry，something wrong, try again later\"};\n\n// 检查输入数据\nif (!msg.payload) {\n    node.error(\"输入数据为空\", msg);\n    msg.payload = errorResponse;\n    return msg;\n}\n\ntry {\n    let inputData;\n    \n    // 处理输入数据\n    if (typeof msg.payload === 'string') {\n        inputData = JSON.parse(msg.payload);\n    } else {\n        inputData = msg.payload;\n    }\n    \n    // 记录调试信息\n    node.log(\"开始提取AI响应...\");\n    \n    // 方法1: 直接从response_text中提取（如果存在）\n    let responseText = safeGet(inputData, 'response_text');\n    \n    // 方法2: 从message.content中提取\n    if (!responseText) {\n        responseText = safeGet(inputData, 'message.content');\n    }\n    \n    // 方法3: 从data.choices[0].message.content中提取\n    if (!responseText) {\n        responseText = safeGet(inputData, 'data.choices.0.message.content');\n    }\n    \n    if (!responseText) {\n        node.warn(\"未找到响应文本内容\");\n        msg.payload = errorResponse;\n        return msg;\n    }\n    \n    // 解析响应文本中的JSON\n    let parsedContent;\n    try {\n        parsedContent = JSON.parse(responseText);\n    } catch (parseError) {\n        node.error(\"解析响应JSON失败: \" + parseError.message);\n        msg.payload = errorResponse;\n        return msg;\n    }\n    \n    // 提取ai_respond字段\n    const aiRespond = safeGet(parsedContent, 'ai_respond');\n    \n    if (!aiRespond) {\n        node.warn(\"未找到ai_respond字段\");\n        node.log(\"可用字段: \" + JSON.stringify(Object.keys(parsedContent || {})));\n        msg.payload = errorResponse;\n        return msg;\n    }\n    \n    // 构建输出\n    const output = {\n        \"text\": aiRespond\n    };\n    \n    msg.payload = output;\n    node.log(\"成功提取AI响应: \" + aiRespond);\n    \n    return msg;\n    \n} catch (error) {\n    node.error(\"处理数据时出错: \" + error.message, msg);\n    msg.payload = errorResponse;\n    return msg;\n}",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1680,
      "y": 360,
      "wires": [
        [
          "b23d39f35473a857"
        ]
      ]
    },
    {
      "id": "14f423c57f0ba1d6",
      "type": "json",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": false,
      "x": 1510,
      "y": 360,
      "wires": [
        [
          "7e430c5230e0b66a"
        ]
      ]
    },
    {
      "id": "b23d39f35473a857",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "Telegram回复",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/telegram/telegram/reply/last",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 1880,
      "y": 360,
      "wires": [
        []
      ]
    },
    {
      "id": "19fe770669e43c00",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "Telegram回复",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/telegram/telegram/reply/last",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 2960,
      "y": 200,
      "wires": [
        []
      ]
    },
    {
      "id": "a194083b3fb73841",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "状态反馈",
      "func": "// Function Node Code - Natural Language Device Status Description (优化排版版)\nfunction parseHomeAssistantData(inputData) {\n    \n    // Helper function to get color name from RGB values\n    function getColorName(r, g, b) {\n        const colors = [\n            { name: \"red\", rgb: [255, 0, 0] },\n            { name: \"green\", rgb: [0, 255, 0] },\n            { name: \"blue\", rgb: [0, 0, 255] },\n            { name: \"yellow\", rgb: [255, 255, 0] },\n            { name: \"cyan\", rgb: [0, 255, 255] },\n            { name: \"magenta\", rgb: [255, 0, 255] },\n            { name: \"orange\", rgb: [255, 165, 0] },\n            { name: \"purple\", rgb: [128, 0, 128] },\n            { name: \"pink\", rgb: [255, 192, 203] },\n            { name: \"white\", rgb: [255, 255, 255] },\n            { name: \"warm white\", rgb: [255, 235, 205] }\n        ];\n        \n        let minDistance = Infinity;\n        let closestColor = \"unknown color\";\n        \n        for (const color of colors) {\n            const distance = Math.sqrt(\n                Math.pow(r - color.rgb[0], 2) +\n                Math.pow(g - color.rgb[1], 2) +\n                Math.pow(b - color.rgb[2], 2)\n            );\n            \n            if (distance < minDistance) {\n                minDistance = distance;\n                closestColor = color.name;\n            }\n        }\n        \n        return closestColor;\n    }\n    \n    // Helper function to get color temperature name\n    function getColorTempName(temp) {\n        if (temp < 2700) return \"very warm white\";\n        if (temp < 3000) return \"warm white\";\n        if (temp < 4000) return \"soft white\";\n        if (temp < 5000) return \"neutral white\";\n        if (temp < 6500) return \"cool white\";\n        return \"daylight white\";\n    }\n    \n    // Helper function to get color from hue\n    function getColorFromHue(hue, saturation) {\n        if (saturation < 20) return \"white\";\n        \n        if (hue < 15 || hue >= 345) return \"red\";\n        if (hue < 45) return \"orange\";\n        if (hue < 75) return \"yellow\";\n        if (hue < 165) return \"green\";\n        if (hue < 195) return \"cyan\";\n        if (hue < 255) return \"blue\";\n        if (hue < 285) return \"purple\";\n        if (hue < 345) return \"magenta\";\n        \n        return \"unknown color\";\n    }\n    \n    // Helper function to extract room name from friendly_name or entity_id\n    function extractRoomName(friendlyName, entityId) {\n        let roomName = \"\";\n        \n        // 先尝试从friendly_name中提取房间名\n        if (friendlyName) {\n            const roomPatterns = [\n                /^([^-]+)\\s*-/,  // \"Living Room - Light\" 格式\n                /^([^_]+)\\s*_/,  // \"Living_Room_Light\" 格式\n                /^(.*?)\\s+(Light|Power|Temperature|Humidity|Motion)/i  // \"Living Room Light\" 格式\n            ];\n            \n            for (const pattern of roomPatterns) {\n                const match = friendlyName.match(pattern);\n                if (match) {\n                    roomName = match[1].trim();\n                    break;\n                }\n            }\n            \n            // 如果没有匹配到，检查是否包含 \"Room\" 或 \"room\"\n            if (!roomName) {\n                const roomMatch = friendlyName.match(/(.*?room)/i);\n                if (roomMatch) {\n                    roomName = roomMatch[1];\n                }\n            }\n        }\n        \n        // 如果还没有找到房间名，从entity_id中提取\n        if (!roomName) {\n            const entityMatch = entityId.match(/^[^.]+\\.([^_]+)_?/);\n            if (entityMatch) {\n                roomName = entityMatch[1].replace(/_/g, ' ');\n            }\n        }\n        \n        // 标准化房间名（统一大小写格式）\n        if (roomName) {\n            return roomName.toLowerCase()\n                          .split(' ')\n                          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                          .join(' ');\n        }\n        \n        return \"Unknown Room\";\n    }\n    \n    // Helper function to extract device type from friendly_name or entity_id\n    function extractDeviceType(friendlyName, entityId) {\n        if (friendlyName) {\n            // 查找常见设备类型关键词\n            const deviceTypes = [\n                'light', 'power', 'temperature', 'temp', 'humidity', 'motion', \n                'switch', 'fan', 'sensor', 'binary_sensor'\n            ];\n            \n            const lowerName = friendlyName.toLowerCase();\n            for (const type of deviceTypes) {\n                if (lowerName.includes(type)) {\n                    return type === 'temp' ? 'temperature' : type;\n                }\n            }\n        }\n        \n        // 从entity_id中提取设备类型\n        const domain = entityId.split('.')[0];\n        return domain;\n    }\n    \n    try {\n        // Parse JSON string if input is string\n        const data = typeof inputData === 'string' ? JSON.parse(inputData) : inputData;\n        \n        // Check if operation succeeded\n        if (!data.success) {\n            return \"Operation failed, unable to retrieve device information\";\n        }\n        \n        // 按房间分组设备\n        const roomDevices = {};\n        \n        if (data.data && data.data.states) {\n            data.data.states.forEach(state => {\n                const friendlyName = state.attributes?.friendly_name;\n                const roomName = extractRoomName(friendlyName, state.entity_id);\n                const deviceType = extractDeviceType(friendlyName, state.entity_id);\n                \n                if (!roomDevices[roomName]) {\n                    roomDevices[roomName] = [];\n                }\n                \n                let deviceInfo = \"\";\n                \n                if (state.state === \"on\" && state.attributes) {\n                    // 灯光设备的详细信息\n                    if (deviceType === \"light\") {\n                        deviceInfo = \"Light is on\";\n                        \n                        // Add brightness information\n                        if (state.attributes.brightness !== undefined) {\n                            const brightnessPercent = Math.round((state.attributes.brightness / 255) * 100);\n                            deviceInfo += ` (${brightnessPercent}% brightness)`;\n                        }\n                        \n                        // Add color information\n                        if (state.attributes.rgb_color) {\n                            const [r, g, b] = state.attributes.rgb_color;\n                            const colorName = getColorName(r, g, b);\n                            deviceInfo += ` ${colorName}`;\n                        } else if (state.attributes.color_temp) {\n                            const tempName = getColorTempName(state.attributes.color_temp);\n                            deviceInfo += ` ${tempName}`;\n                        } else if (state.attributes.hs_color) {\n                            const [hue, sat] = state.attributes.hs_color;\n                            const colorName = getColorFromHue(hue, sat);\n                            deviceInfo += ` ${colorName}`;\n                        }\n                    } else {\n                        // 其他设备\n                        const deviceName = deviceType.charAt(0).toUpperCase() + deviceType.slice(1);\n                        deviceInfo = `${deviceName} is on`;\n                    }\n                } else if (state.state === \"off\") {\n                    const deviceName = deviceType.charAt(0).toUpperCase() + deviceType.slice(1);\n                    deviceInfo = `${deviceName} is off`;\n                } else if (state.state === \"unavailable\") {\n                    const deviceName = deviceType.charAt(0).toUpperCase() + deviceType.slice(1);\n                    deviceInfo = `${deviceName} is unavailable`;\n                } else {\n                    // Handle numeric values (sensors)\n                    if (!isNaN(parseFloat(state.state))) {\n                        const value = parseFloat(state.state);\n                        const unit = state.attributes?.unit_of_measurement || \"\";\n                        \n                        if (deviceType.includes('temp')) {\n                            deviceInfo = `temp is ${value}${unit}`;\n                        } else if (deviceType.includes('humidity')) {\n                            deviceInfo = `humidity is ${value}${unit}`;\n                        } else if (deviceType.includes('power')) {\n                            deviceInfo = `power is ${value}${unit}`;\n                        } else {\n                            const deviceName = deviceType.replace(/_/g, ' ');\n                            deviceInfo = `${deviceName} is ${value}${unit}`;\n                        }\n                    } else {\n                        // Handle other states\n                        const deviceName = deviceType.charAt(0).toUpperCase() + deviceType.slice(1);\n                        deviceInfo = `${deviceName} is ${state.state}`;\n                    }\n                }\n                \n                roomDevices[roomName].push(deviceInfo);\n            });\n        }\n        \n        if (Object.keys(roomDevices).length === 0) {\n            return \"No devices found in response\";\n        }\n        \n        // 格式化输出\n        const formattedOutput = [];\n        \n        for (const [roomName, devices] of Object.entries(roomDevices)) {\n            formattedOutput.push(`【${roomName}】`);\n            devices.forEach(device => {\n                formattedOutput.push(`  - ${device}`);\n            });\n            formattedOutput.push(\"\"); // 添加空行分隔不同房间\n        }\n        \n        // 移除最后的空行\n        if (formattedOutput[formattedOutput.length - 1] === \"\") {\n            formattedOutput.pop();\n        }\n        \n        return formattedOutput.join('\\n');\n        \n    } catch (error) {\n        return `Data parsing failed: ${error.message}`;\n    }\n}\n\n// Node-RED Function Node usage:\nconst parsedResult = parseHomeAssistantData(msg.payload);\nmsg.payload = {\"text\": parsedResult};\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2780,
      "y": 200,
      "wires": [
        [
          "19fe770669e43c00"
        ]
      ]
    },
    {
      "id": "417e068a8bcabe6a",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "查找设备ID",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/match-devices",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 2090,
      "y": 200,
      "wires": [
        [
          "b9b90361f8f9b537"
        ]
      ]
    },
    {
      "id": "72fc6e1e6ac5b1a7",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "查询控制",
      "func": "// Node-RED Function Node - 提取devices并输出JSON对象\n// 输入: msg.payload 包含完整的智能家居控制数据\n// 输出: msg.payload 只包含devices数组的JSON对象\n\n// 检查输入数据是否存在\nif (!msg.payload) {\n    node.error(\"输入数据为空\", msg);\n    return null;\n}\n\ntry {\n    // 解析输入数据（如果是字符串）\n    let inputData;\n    if (typeof msg.payload === 'string') {\n        inputData = JSON.parse(msg.payload);\n    } else {\n        inputData = msg.payload;\n    }\n    \n    // 检查是否包含devices字段\n    if (!inputData.devices || !Array.isArray(inputData.devices)) {\n        node.warn(\"输入数据中没有找到devices数组\");\n        msg.payload = { devices: [] };\n        return msg;\n    }\n    \n    // 直接输出devices数组\n    msg.payload = inputData.devices;\n    \n    // 记录处理信息\n    node.log(`成功提取 ${inputData.devices.length} 个设备`);\n    \n    return msg;\n    \n} catch (error) {\n    node.error(\"处理数据时出错: \" + error.message, msg);\n    return null;\n}",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1940,
      "y": 200,
      "wires": [
        [
          "417e068a8bcabe6a"
        ]
      ]
    },
    {
      "id": "b9b90361f8f9b537",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "提取entities id",
      "func": "// 获取输入数据\nlet inputData = msg.payload;\n\n// 如果输入是字符串，尝试解析为 JSON\nif (typeof inputData === 'string') {\n    try {\n        inputData = JSON.parse(inputData);\n    } catch (parseError) {\n        msg.payload = { entity_ids: [] };\n        node.error(\"JSON 解析失败: \" + parseError.message);\n        return msg;\n    }\n}\n\n// 初始化结果数组\nlet entityIds = [];\n\ntry {\n    // 检查数据结构并提取 entity_id\n    if (inputData && \n        inputData.success === true && \n        inputData.data && \n        Array.isArray(inputData.data.commands)) {\n        \n        // 遍历 commands 数组，提取 entity_id\n        inputData.data.commands.forEach(command => {\n            if (command) {\n                // 如果有直接的 entity_id，使用它\n                if (command.entity_id && typeof command.entity_id === 'string') {\n                    entityIds.push(command.entity_id);\n                }\n                // 如果没有直接的 entity_id 或为 null，从 matched_entities 中提取\n                else if (Array.isArray(command.matched_entities)) {\n                    command.matched_entities.forEach(entity => {\n                        if (entity && entity.entity_id && typeof entity.entity_id === 'string') {\n                            entityIds.push(entity.entity_id);\n                        }\n                    });\n                }\n            }\n        });\n        \n        // 去重处理\n        entityIds = [...new Set(entityIds)];\n    }\n    \n} catch (error) {\n    node.error(\"处理数据时发生错误: \" + error.message);\n}\n\n// 直接输出指定格式的对象\nmsg.payload = {\n    entity_ids: entityIds\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2280,
      "y": 200,
      "wires": [
        [
          "1f8b2574e9a1e6f8"
        ]
      ]
    },
    {
      "id": "e0555b7a0f9f75eb",
      "type": "http request",
      "z": "f154d9b8aa3f1a9f",
      "name": "状态查询",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/entity-states",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 2620,
      "y": 200,
      "wires": [
        [
          "a194083b3fb73841"
        ]
      ]
    },
    {
      "id": "1f8b2574e9a1e6f8",
      "type": "delay",
      "z": "f154d9b8aa3f1a9f",
      "name": "",
      "pauseType": "delay",
      "timeout": "1",
      "timeoutUnits": "seconds",
      "rate": "1",
      "nbRateUnits": "1",
      "rateUnits": "second",
      "randomFirst": "1",
      "randomLast": "5",
      "randomUnits": "seconds",
      "drop": false,
      "allowrate": false,
      "outputs": 1,
      "x": 2460,
      "y": 200,
      "wires": [
        [
          "e0555b7a0f9f75eb"
        ]
      ]
    },
    {
      "id": "83097a30633a0a6b",
      "type": "function",
      "z": "f154d9b8aa3f1a9f",
      "name": "优化房间数据",
      "func": "// Function Node Code - Room Data Parser (简化版)\nfunction parseRoomData(inputData) {\n    try {\n        // Parse JSON string if input is string\n        const data = typeof inputData === 'string' ? JSON.parse(inputData) : inputData;\n        \n        // Check if rooms data exists - 支持两种数据结构\n        const rooms = data.rooms || data.data?.rooms;\n        \n        if (!rooms || !Array.isArray(rooms)) {\n            return [{\"name\":\"\",\"floor_name\":\"\"}];\n        }\n        \n        // Extract room information - 简化输出格式\n        const roomList = rooms.map(room => ({\n            name: room.name || \"\",\n            floor_name: room.floor_id || \"\"\n        }));\n        \n        return roomList;\n        \n    } catch (error) {\n        return [{\"name\":\"\",\"floor_name\":\"\"}];\n    }\n}\n\n// Node-RED Function Node usage:\nconst parsedResult = parseRoomData(msg.payload);\nmsg.payload = parsedResult;\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 900,
      "y": 220,
      "wires": [
        [
          "96d91e963806344b"
        ]
      ]
    },
    {
      "id": "744d6ed9881a5c21",
      "type": "switch",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload.type",
      "propertyType": "msg",
      "rules": [
        {
          "t": "eq",
          "v": "text",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "voice",
          "vt": "str"
        }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 2,
      "x": 250,
      "y": 900,
      "wires": [
        [
          "a737723d80b3a140"
        ],
        [
          "e79a9491762ea598"
        ]
      ]
    },
    {
      "id": "8a87f7503efcaf90",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": false,
      "x": 190,
      "y": 860,
      "wires": [
        [
          "744d6ed9881a5c21"
        ]
      ]
    },
    {
      "id": "4036362731048d42",
      "type": "websocket in",
      "z": "73840c3923b28da6",
      "name": "Telegram Message",
      "server": "6e11d670ca599080",
      "client": "",
      "x": 130,
      "y": 240,
      "wires": [
        [
          "682a0cb7fd078113",
          "9b664e50e0530fd9"
        ]
      ]
    },
    {
      "id": "a737723d80b3a140",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 430,
      "y": 900,
      "wires": [
        []
      ]
    },
    {
      "id": "624fdc2e2294fedd",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "提取语音文字",
      "func": " const inputData = JSON.parse(msg.payload);\n    \n    // 提取text字段\n    const textContent = inputData.data.text;\n    \n    // 构造输出对象\n    msg.payload = {\n        content: textContent\n    };\n    \n    return msg;\n    ",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 440,
      "y": 980,
      "wires": [
        []
      ]
    },
    {
      "id": "ddeb89a570db4154",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "Whisper",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/openai/openai/transcribe-url",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 280,
      "y": 980,
      "wires": [
        [
          "624fdc2e2294fedd"
        ]
      ]
    },
    {
      "id": "6bad637448b25fc4",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "OpenAI 意图转换",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/openai/openai/simple-chat",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 590,
      "y": 240,
      "wires": [
        [
          "3ff597c4d0e14f71",
          "6fe73f6623a5285f",
          "4c515d706748c50c"
        ]
      ]
    },
    {
      "id": "e79a9491762ea598",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "语音提示词",
      "func": "const audioUrl = msg.payload.content;\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nmsg.payload = {\n    \"audio_url\": audioUrl,\n    \"model\": \"whisper-1\",\n    \"language\": null, // 自动检测\n    \"response_format\": \"json\"\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 130,
      "y": 980,
      "wires": [
        [
          "ddeb89a570db4154"
        ]
      ]
    },
    {
      "id": "1402fea6e4aa7b01",
      "type": "switch",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload.intent",
      "propertyType": "msg",
      "rules": [
        {
          "t": "eq",
          "v": "Query Device Status",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Control Device",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Control Scene",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Set Scene",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Set Automation",
          "vt": "str"
        },
        {
          "t": "eq",
          "v": "Other",
          "vt": "str"
        }
      ],
      "checkall": "true",
      "repair": false,
      "outputs": 6,
      "x": 1290,
      "y": 240,
      "wires": [
        [
          "051ec9baf40fb1a7"
        ],
        [
          "21baa26c971c7c00"
        ],
        [],
        [],
        [],
        []
      ]
    },
    {
      "id": "dd1ac6ff6524b02f",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "AI提示词",
      "func": "// 构建输出消息\nconst inputText = msg.payload.content;\n\n// 设置请求头\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// 构建请求负载\nmsg.payload = {\n    \"system_prompt\": `你是Home Assistant智能家居指令解析专家。分析用户自然语言指令，提取房间、设备信息，判断意图并转换为标准的Home Assistant服务调用。\n\n## 意图分类（六种类型）\n1. **Query Device Status**（查询设备状态）\n2. **Control Device**（控制设备）\n3. **Control Scene**（场景控制）\n4. **Set Scene**（设定场景）\n5. **Set Automation**（设定自动化）\n6. **Other**（其他）\n\n### 意图分类规则\n- **Control Device**：用户明确指定设备和动作（如：\"打开客厅灯\"、\"关闭书房空调\"）\n- **Control Scene**：用户使用场景关键词（如：\"启动/执行/开启XX模式/场景\"）\n- **Query Device Status**：用户询问设备状态（如：\"客厅灯开着吗\"、\"空调温度是多少\"）\n\n## 房间类型映射\n\\`\\`\\`\n客厅/大厅/会客厅/起居室 → \"living_room\"\n卧室/睡房 → \"bedroom\"\n主卧/主卧室 → \"master_bedroom\"\n客卧/次卧 → \"guest_bedroom\"\n书房/办公室/工作室/学习室 → \"study\"\n厨房/烹饪间 → \"kitchen\"\n餐厅/饭厅/用餐区 → \"dining_room\"\n卫生间/洗手间/厕所/浴室 → \"bathroom\"\n阳台/露台/平台 → \"balcony\"\n花园/后院/前院/庭院 → \"garden\"\n车库/停车库 → \"garage\"\n走廊/过道/通道 → \"hallway\"\n\\`\\`\\`\n\n## 设备类型映射（基于Home Assistant域和传感器的device class）\n\\`\\`\\`\n灯/台灯/吊灯/射灯/筒灯/照明灯/落地灯/壁灯/夜灯/吸顶灯 → \"light\"\n空调/冷气/制冷机/暖气 → \"climate\"\n风扇/吊扇/台扇/电扇 → \"fan\"\n电视/TV/显示器/投影仪 → \"media_player\"\n音响/音箱/扬声器/智能音箱 → \"media_player\"\n窗帘/百叶窗/遮光帘/电动窗帘 → \"cover\"\n开关/插座/智能插座 → \"switch\"\n温度计/温度传感器 → \"temperature\"\n湿度计/湿度传感器 → \"humidity\"\n人体感应器/移动传感器/运动传感器 → \"motion\"\n占用传感器/在位传感器/房间占用检测器 → \"occupancy\"\n门锁/智能锁/指纹锁 → \"lock\"\n摄像头/监控/门铃摄像头 → \"camera\"\n门窗传感器/门磁 → \"door\"\n烟雾报警器/烟感器 → \"smoke\"\n扫地机器人/拖地机器人 → \"vacuum\"\n空气净化器/加湿器/除湿器 → \"humidifier\"\n洗衣机/干衣机 → \"washing_machine\"\n门铃/智能门铃 → \"button\"\n\\`\\`\\`\n\n## 英文设备名称映射\nceiling light/吸顶灯 → \"light\" (device_name: \"吸顶灯\", device_name_en: \"ceiling_light\")\nfloor lamp/落地灯 → \"light\" (device_name: \"落地灯\", device_name_en: \"floor_lamp\")\ntable lamp/台灯 → \"light\" (device_name: \"台灯\", device_name_en: \"table_lamp\")\n\n## Home Assistant服务调用规则\n\n### 灯光控制 (light域)\n- **服务**: \\`light.turn_on\\`, \\`light.turn_off\\`, \\`light.toggle\\`\n- **参数**:\n  \\`\\`\\`json\n  {\n    \"color_name\": \"red|blue|green|white|yellow|purple|orange|pink\",\n    \"brightness_pct\": 1-100,\n    \"color_temp\": 153-500,  // 冷光6500K=153, 暖光3000K=333\n    \"rgb_color\": [255, 0, 0],\n    \"transition\": 秒数\n  }\n  \\`\\`\\`\n\n### 空调控制 (climate域)\n- **服务**: \\`climate.set_temperature\\`, \\`climate.set_hvac_mode\\`, \\`climate.turn_on\\`, \\`climate.turn_off\\`\n- **参数**:\n  \\`\\`\\`json\n  {\n    \"temperature\": 温度值,\n    \"hvac_mode\": \"heat|cool|auto|dry|fan_only|off\",\n    \"fan_mode\": \"auto|low|medium|high\",\n    \"swing_mode\": \"on|off\"\n  }\n  \\`\\`\\`\n\n### 风扇控制 (fan域)\n- **服务**: \\`fan.turn_on\\`, \\`fan.turn_off\\`, \\`fan.set_percentage\\`, \\`fan.oscillate\\`\n- **参数**:\n  \\`\\`\\`json\n  {\n    \"percentage\": 1-100,  // 1档=20%, 2档=40%, 3档=60%, 4档=80%, 5档=100%\n    \"oscillating\": true|false\n  }\n  \\`\\`\\`\n\n### 窗帘控制 (cover域)\n- **服务**: \\`cover.open_cover\\`, \\`cover.close_cover\\`, \\`cover.set_cover_position\\`, \\`cover.stop_cover\\`\n- **参数**:\n  \\`\\`\\`json\n  {\n    \"position\": 0-100  // 0=完全关闭, 100=完全打开\n  }\n  \\`\\`\\`\n\n### 开关控制 (switch域)\n- **服务**: \\`switch.turn_on\\`, \\`switch.turn_off\\`, \\`switch.toggle\\`\n\n### 媒体播放器 (media_player域)\n- **服务**: \\`media_player.turn_on\\`, \\`media_player.turn_off\\`, \\`media_player.volume_set\\`, \\`media_player.media_play\\`, \\`media_player.media_pause\\`\n- **参数**:\n  \\`\\`\\`json\n  {\n    \"volume_level\": 0.0-1.0,\n    \"media_content_id\": \"内容ID\",\n    \"media_content_type\": \"music|video\"\n  }\n  \\`\\`\\`\n\n## 参数提取规则\n\n### 颜色参数\n\\`\\`\\`\n红色 → \"red\"\n蓝色 → \"blue\" \n绿色 → \"green\"\n白色 → \"white\"\n黄色 → \"yellow\"\n紫色 → \"purple\"\n橙色 → \"orange\"\n粉色 → \"pink\"\n\\`\\`\\`\n\n### 亮度参数\n\\`\\`\\`\nX% → X\n最亮/全亮 → 100\n最暗/微亮 → 1\n亮一点/调亮一些/亮一些 → +20\n暗一点/调暗一些/暗一些 → -20\n\\`\\`\\`\n\n### 温度参数\n\\`\\`\\`\nX度 → X\n调高/升高/热一点 → +2\n调低/降低/冷一点 → -2\n\\`\\`\\`\n\n### 色温参数\n\\`\\`\\`\n暖光/暖白 → 333 (3000K)\n冷光/冷白 → 153 (6500K)  \n自然光/日光 → 250 (4000K)\n\\`\\`\\`\n\n## JSON输出格式\n\n{\n  \"user_input\": \"用户原始输入\",\n  \"intent\": \"Control Device|Query Device Status|Control Scene|Set Scene|Set Automation|Other\",\n  \"devices\": [\n    {\n      \"floor_name\": \"楼层名称（如：一楼、二楼）\",\n      \"floor_name_en\": \"楼层英文名称（如：First Floor、Second Floor）\",\n      \"floor_type\": \"楼层英文名称（如：first_floor、second_floor）\",\n      \"room_type\": \"房间类型代码（如：living_room）\",\n      \"room_name\": \"房间中文名称\",\n      \"room_name_en\": \"房间英文名称\",\n      \"device_type\": \"设备类型（HA域名）\",\n      \"device_name\": \"设备中文名称\",\n      \"device_name_en\": \"设备英文名称\",\n      \"service\": \"HA服务名称（如：light.turn_on）\",\n      \"service_data\": \"服务参数对象\"\n    }\n  ],\n  \"confidence\": 0.0-1.0，\n  \"user_responds\": \"根据用户的要求做一个简单的相应，语言与user_input保持一致“\n}\n\n## 输出示例\n\n### 示例1：自定义房间设备控制\n{\n  \"user_input\": \"打开Jayden房间的灯，亮度调亮一些\",\n  \"intent\": \"Control Device\",\n  \"devices\": [\n    {\n      \"floor_name\": \"\",\n      \"floor_name_en\": \"\",\n      \"floor_type\": \"\", \n      \"room_type\": \"\",\n      \"room_name\": \"Jayden房间\",\n      \"room_name_en\": \"Jayden_room\",\n      \"device_type\": \"light\",\n      \"device_name\": \"\",\n      \"device_name_en\": \"\",\n      \"service\": \"light.turn_on\",\n      \"service_data\": {\n        \"brightness_pct\": \"+20\"\n      }\n    }\n  ],\n  \"confidence\": 0.9，\n  \"user_responds\": \"好的，即将为您执行灯光调节“\n}\n\n### 示例2：多设备状态查询\n{\n  \"user_input\": \"主卧和客厅灯的状态\",\n  \"intent\": \"Query Device Status\",\n  \"devices\": [\n    {\n      \"floor_name\": \"\",\n      \"floor_name_en\": \"\",\n      \"floor_type\": \"\",\n      \"room_type\": \"master_bedroom\",\n      \"room_name\": \"主卧\",\n      \"room_name_en\": \"master_bedroom\",\n      \"device_type\": \"light\",\n      \"device_name\": \"灯\",\n      \"device_name_en\": \"light\",\n      \"service\": \"light.state\",\n      \"service_data\": {}\n    },\n    {\n      \"floor_name\": \"\",\n      \"floor_name_en\": \"\",\n      \"floor_type\": \"\",\n      \"room_type\": \"living_room\",\n      \"room_name\": \"客厅\",\n      \"room_name_en\": \"living_room\",\n      \"device_type\": \"light\",\n      \"device_name\": \"灯\",\n      \"device_name_en\": \"light\",\n      \"service\": \"light.state\",\n      \"service_data\": {}\n    }\n  ],\n  \"confidence\": 0.9，\n  \"user_responds\": \"好的，即将为您查看灯光状态“\n}\n\n### 示例3：多楼层混合控制\n{\n  \"user_input\": \"一楼落地灯变成蓝色，二楼客房空调调成26度，落地灯变成红色，亮一点\",\n  \"intent\": \"Control Device\",\n  \"devices\": [\n    {\n      \"floor_name\": \"一楼\",\n      \"floor_name_en\": \"First Floor\",\n      \"floor_type\": \"first_floor\",\n      \"room_type\": \"\",\n      \"room_name\": \"\",\n      \"room_name_en\": \"\",\n      \"device_type\": \"light\",\n      \"device_name\": \"落地灯\",\n      \"device_name_en\": \"floor_lamp\",\n      \"service\": \"light.turn_on\",\n      \"service_data\": {\n        \"color_name\": \"blue\"\n      }\n    },\n    {\n      \"floor_name\": \"二楼\",\n      \"floor_name_en\": \"Second Floor\",\n      \"floor_type\": \"second_floor\",\n      \"room_type\": \"guest_bedroom\",\n      \"room_name\": \"客房\",\n      \"room_name_en\": \"guest_bedroom\",\n      \"device_type\": \"climate\",\n      \"device_name\": \"空调\",\n      \"device_name_en\": \"air_conditioner\",\n      \"service\": \"climate.set_temperature\",\n      \"service_data\": {\n        \"temperature\": 26\n      }\n    },\n    {\n      \"floor_name\": \"二楼\",\n      \"floor_name_en\": \"Second Floor\",\n      \"floor_type\": \"second_floor\",\n      \"room_type\": \"guest_bedroom\",\n      \"room_name\": \"客房\",\n      \"room_name_en\": \"guest_bedroom\",\n      \"device_type\": \"light\",\n      \"device_name\": \"落地灯\",\n      \"device_name_en\": \"floor_light\",\n      \"service\": \"light.turn_on\",\n      \"service_data\": {\n        \"color_name\": \"red\",\n        \"brightness_pct\": \"+20\"\n      }\n    }\n  ],\n  \"confidence\": 0.9，\n  \"user_responds\": \"好的，即将为您执行灯光和空调的控制“\n}\n\n## 重要注意事项\n\n1. **服务名称格式**: 必须使用完整的Home Assistant服务格式：\\`域名.服务名\\`\n\n2. **楼层/房间上下文继承**：若一句话中前面已指定楼层或房间，后续未标明位置的设备默认继承最近的楼层或房间。\n\n3. **房间匹配规则**：\n   - **家里/全屋/全家/整个屋子/所有房间**：❌ 不能当房间名用！✅ room_name 和room_name_en 必须留空，只保留设备类型。\n   - **只提楼层**（例：「二楼空调」）：✅ 填写 \\`floor_name\\`，房间留空。\n   - **只提房间**（例：「主卧灯」）：✅ 填写 \\`room_name\\`，楼层留空。\n   - **同时有楼层和房间**（例：「二楼客厅空调」）：✅ \\`floor_name\\` 和 \\`room_name\\` 都要填。\n\n4. **设备类型 vs 设备名称**：\n   - 用户只说了设备类型（如：灯、空调、风扇…）时，\\`device_name\\` 和 \\`device_name_en\\` 必须留空\n   - 只有用户明确说了「落地灯」「台灯」「书房空调」这种情况，才能填 \\`device_name\\`\n   - **人员检测查询规则**：专门处理\"有人吗？\"这类查询，明确要求同时返回occupancy和motion两种传感器\n\n5. **服务调用格式**：\n   - 查询状态统一写成：\\`light.state\\`、\\`climate.state\\`、\\`sensor.state\\`、\\`switch.state\\`\n   - 不允许随意更改格式\n\n6. **参数完整性**：\n   - 相对调节必须带符号：\\`+\\` 或 \\`-\\`\n   - 参数字段必须写 \\`service_data\\`，不能写成 \\`data\\`\n\n7. **格式要求**：\n   - JSON必须是有效格式，所有引号/逗号正确\n   - 确保所有必需字段都已填写`,\n    \n    \"user_prompt\": inputText,\n    \n    \"options\": {\n        \"model\": \"gpt-3.5-turbo\",\n        \"temperature\": 0.7,\n        \"max_tokens\": 3500\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 420,
      "y": 240,
      "wires": [
        [
          "6bad637448b25fc4",
          "b110807b0793af0a"
        ]
      ]
    },
    {
      "id": "6fe73f6623a5285f",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 830,
      "y": 240,
      "wires": [
        [
          "ba677b67e967ef0d",
          "98ea58fe8bc05a0a",
          "b5d6210da1507894"
        ]
      ]
    },
    {
      "id": "ea54b17bab992eab",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "状态反馈",
      "func": "// === Node-RED function: 状态反馈（Telegram 接口 { text: \"\" }） ===\n\n// 解析 payload（兼容字符串/对象）\nlet payload;\ntry {\n  payload = typeof msg.payload === \"string\" ? JSON.parse(msg.payload) : msg.payload;\n} catch (e) {\n  msg.payload = { text: \"Invalid JSON input.\" };\n  return msg;\n}\n\n// 取 results\nconst results = payload?.data?.results || [];\nif (!Array.isArray(results) || results.length === 0) {\n  msg.payload = { text: \"No devices found.\" };\n  return msg;\n}\n\n// domain -> 类别名\nconst CATEGORY_MAP = {\n  light: \"Lights\",\n  climate: \"Air Conditioners\",\n  switch: \"Switches\",\n  fan: \"Fans\",\n  media_player: \"Media Players\",\n  sensor: \"Sensors\",\n  others: \"Others\"\n};\n\nfunction getDomain(id) {\n  return id?.split(\".\")[0] || \"others\";\n}\n\n// 将状态描述压缩为 “on · 73% · Yellow”\nfunction compactDescription(item) {\n  let desc = item?.data?.description || item?.description || \"\";\n  if (desc) {\n    desc = desc\n      .replace(/\\s*brightness\\s*/gi, \"\")\n      .replace(/\\s*,\\s*/g, \" · \")\n      .replace(/\\s+/g, \" \")\n      .trim();\n    return desc;\n  }\n  const st = (item?.data?.state ?? item?.state ?? \"\").toString().trim();\n  const bri = item?.data?.attributes?.brightness;\n  const hs = item?.data?.attributes?.hs_color;\n  const rgb = item?.data?.attributes?.rgb_color;\n\n  const parts = [];\n  if (st) parts.push(st);\n  if (typeof bri === \"number\") {\n    const pct = Math.round((bri / 255) * 100);\n    parts.push(pct + \"%\");\n  }\n  if (Array.isArray(hs) && hs.length >= 2) {\n    const [h, s] = hs;\n    if (Math.abs(h - 60) <= 5 && s >= 90) parts.push(\"Yellow\");\n  } else if (Array.isArray(rgb) && rgb.length >= 3) {\n    const [r, g, b] = rgb;\n    if (r === 255 && g === 255 && b === 0) parts.push(\"Yellow\");\n  }\n  return parts.join(\" · \") || \"n/a\";\n}\n\n// 分组\nconst groups = {};\nfor (const item of results) {\n  const entityId = item?.entity_id || item?.data?.entity_id || \"\";\n  const category = CATEGORY_MAP[getDomain(entityId)] || \"Others\";\n  const name = item?.data?.friendly_name || item?.friendly_name || entityId || \"Unknown device\";\n  const desc = compactDescription(item);\n\n  if (!groups[category]) groups[category] = [];\n  groups[category].push({ name, desc });\n}\n\n// 类别顺序\nconst ORDER = [\"Lights\", \"Air Conditioners\", \"Fans\", \"Switches\", \"Media Players\", \"Sensors\", \"Others\"];\nconst categories = Object.keys(groups).sort((a, b) => {\n  const ia = ORDER.indexOf(a), ib = ORDER.indexOf(b);\n  if (ia === -1 && ib === -1) return a.localeCompare(b);\n  if (ia === -1) return 1;\n  if (ib === -1) return -1;\n  return ia - ib;\n});\n\nconst showCategory = categories.length > 1;\nconst SEP = \"────────────────\";\nconst NAME_WRAP = 28;\n\n// 生成文本\nlet out = [];\nfor (let i = 0; i < categories.length; i++) {\n  const cat = categories[i];\n  const devs = groups[cat];\n\n  if (showCategory) out.push(`[${cat}]`);\n\n  for (const d of devs) {\n    if (d.name.length > NAME_WRAP) {\n      out.push(`• ${d.name}`);\n      out.push(`  — ${d.desc}`);\n    } else {\n      out.push(`• ${d.name} — ${d.desc}`);\n    }\n  }\n\n  if (showCategory && i !== categories.length - 1) {\n    out.push(\"\");\n    out.push(SEP);\n    out.push(\"\");\n  } else if (i !== categories.length - 1) {\n    out.push(\"\");\n  }\n}\n\n// 注意：Telegram 文本上限约 4096 字符，如有需要可在此做截断或分片\nlet text = out.join(\"\\n\");\nif (text.length > 4096) {\n  text = text.slice(0, 4093) + \"...\";\n}\n\nmsg.payload = { text };\nreturn msg;\n",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 2380,
      "y": 180,
      "wires": [
        [
          "27ab2cfcd2e6e47e",
          "dba62f21078ec8cd"
        ]
      ]
    },
    {
      "id": "f7259e2d6093c803",
      "type": "inject",
      "z": "73840c3923b28da6",
      "name": "",
      "props": [
        {
          "p": "payload"
        },
        {
          "p": "topic",
          "vt": "str"
        }
      ],
      "repeat": "",
      "crontab": "",
      "once": false,
      "onceDelay": 0.1,
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "x": 90,
      "y": 580,
      "wires": [
        [
          "87b75819e7854a33"
        ]
      ]
    },
    {
      "id": "a8a4d3c604863f01",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 6",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 640,
      "y": 520,
      "wires": []
    },
    {
      "id": "89ddaf12515418b7",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "AI提示词",
      "func": "let inputText = msg.payload;\n\n// 类型检查和转换\nif (typeof inputText !== 'string') {\n    if (inputText === null || inputText === undefined) {\n        inputText = '';\n    } else if (typeof inputText === 'object') {\n        inputText = JSON.stringify(inputText);\n    } else {\n        inputText = String(inputText);\n    }\n}\n\n// 安全地使用 .trim()\ninputText = inputText.trim();\n\n// 设置请求头\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// 构建请求负载\nmsg.payload = {\n    \"system_prompt\": `您是专业的智能家居数据补全专家,专门负责为现有的房间楼层JSON数据补充缺失的标准化字段。\n\n## 核心任务\n- 接收用户提供的现有JSON数据\n- 识别数据中缺失的必填字段\n- 楼层名称统一翻译为标准英文(如 First Floor, Second Floor)\n- 房间名称翻译为标准英文(如 Living Room, Kitchen等)\n\n## 房间类型智能识别规则\n\n**基于中文房间类型映射：**\n- 客厅/大厅/会客厅/起居室 → \"living_room\"\n- 卧室/睡房 → \"bedroom\"\n- 主卧/主卧室 → \"master_bedroom\"\n- 客卧/次卧 → \"guest_bedroom\"\n- 儿童房/小孩房 → \"kids_room\"\n- 厨房/烹饪间 → \"kitchen\"\n- 餐厅/饭厅/用餐区 → \"dining_room\"\n- 书房/办公室/工作室/学习室 → \"study\"\n- 卫生间/洗手间/厕所/浴室 → \"bathroom\"\n- 主卫/主卫生间 → \"master_bathroom\"\n- 客卫/公卫 → \"guest_bathroom\"\n- 储物间/杂物间/收纳间 → \"storage\"\n- 衣帽间/更衣室 → \"closet\"\n- 走廊/过道/通道 → \"hallway\"\n- 玄关/门厅/入户 → \"entrance\"\n- 阳台/露台/平台 → \"balcony\"\n- 花园/后院/前院/庭院 → \"garden\"\n- 车库/停车库 → \"garage\"\n- 地下室/地库 → \"basement\"\n- 阁楼/顶层 → \"attic\"\n- 楼梯间 → \"stairway\"\n- 娱乐室/游戏室/影音室/TV room → \"entertainment\"\n- 健身房/运动室 → \"gym\"\n- 洗衣房/洗衣间 → \"laundry\"\n\n**多语言支持：**\n- 当房间名称为其他语言时,先理解其含义,再参照上述映射规则进行类型判断\n- 例如：英文\"Living Room\"对应\"living_room\"\n- 例如：日文\"寝室\"对应\"bedroom\"\n\n## 楼层类型识别规则\n\n**基于楼层命名映射：**\n- 一楼/1F/1层/地面层/first floor → \"first_floor\", level: 1\n- 二楼/2F/2层/second floor → \"second_floor\", level: 2\n- 三楼/3F/3层/third floor → \"third_floor\", level: 3\n- 四楼及以上类推\n- 地下室/地库/B1/basement → \"basement\", level: -1\n- 阁楼/顶层/attic → \"attic\"\n\n## 输出要求\n\n必须严格按照以下JSON格式输出,不要添加任何markdown标记或额外文字:\n\n{\n  \"floors\": [\n    {\n      \"floor_name\": \"原始楼层名称\",\n      \"floor_name_en\": \"标准英文楼层名\",\n      \"floor_type\": \"楼层类型\",\n      \"level\": 数字\n    }\n  ],\n  \"rooms\": [\n    {\n      \"room_name\": \"原始房间名称\",\n      \"room_name_en\": \"标准英文房间名\",\n      \"room_type\": \"房间类型\"\n    }\n  ]\n}\n\n请直接返回JSON数据,不要包含任何解释说明。`,\n    \n    \"user_prompt\": inputText,\n    \n    \"options\": {\n        \"model\": \"gpt-3.5-turbo\",\n        \"temperature\": 0.7,\n        \"max_tokens\": 3500\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 540,
      "y": 580,
      "wires": [
        [
          "b2ef1c510c36b6af"
        ]
      ]
    },
    {
      "id": "b2ef1c510c36b6af",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "OpenAI 数据补全",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/openai/openai/simple-chat",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [],
      "x": 710,
      "y": 580,
      "wires": [
        [
          "3db15c7304ac82c8",
          "08b6401e873c61a1"
        ]
      ]
    },
    {
      "id": "55dce80d3096d143",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 5",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1380,
      "y": 520,
      "wires": []
    },
    {
      "id": "3db15c7304ac82c8",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": true,
      "x": 870,
      "y": 580,
      "wires": [
        [
          "5784646f83035a30",
          "def726f7ef99debf"
        ]
      ]
    },
    {
      "id": "fefe6e47c45a42b8",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "缓存数据",
      "func": "// Node-RED Function Node代码\n// 提取并缓存实体状态数组\n\ntry {\n    // 检查输入数据是否存在\n    if (!msg.payload || !msg.payload.data || !msg.payload.data.entities) {\n        node.error(\"输入数据格式不正确，缺少 msg.payload.data.entities\", msg);\n        return null;\n    }\n    \n    // 提取实体状态数组\n    const entitiesArray = msg.payload.data.entities;\n    \n    // 将数据缓存到全局上下文中（永久缓存，不会过期）\n    global.set(\"cached_entities\", entitiesArray);\n    \n    // 同时缓存一些元数据\n    const cacheMetadata = {\n        total_count: msg.payload.data.total_count || entitiesArray.length,\n        retrieved_at: msg.payload.data.retrieved_at || new Date().toISOString(),\n        cached_at: new Date().toISOString()\n    };\n    global.set(\"cached_entities_metadata\", cacheMetadata);\n    \n    // 输出提取的数组和缓存信息\n    msg.payload = {\n        entities: entitiesArray,\n        cache_info: {\n            cached: true,\n            cache_key: \"cached_entities\",\n            entity_count: entitiesArray.length,\n            cached_at: cacheMetadata.cached_at,\n            message: \"实体数组已成功缓存到全局上下文\"\n        }\n    };\n    \n    node.log(`成功缓存了 ${entitiesArray.length} 个实体到全局上下文`);\n    \n    return msg;\n    \n} catch (error) {\n    node.error(\"缓存实体数据时发生错误: \" + error.message, msg);\n    msg.payload = {\n        error: true,\n        message: error.message,\n        stack: error.stack\n    };\n    return msg;\n}\n\n// 如果需要读取缓存的数据，可以使用以下代码：\n// const cachedEntities = global.get(\"cached_entities\");\n// const cacheMetadata = global.get(\"cached_entities_metadata\");",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1580,
      "y": 580,
      "wires": [
        []
      ]
    },
    {
      "id": "db93d7ba82d7ae44",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "获取所有实体列表",
      "method": "GET",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/enhanced-entities",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 1050,
      "y": 640,
      "wires": [
        [
          "def726f7ef99debf"
        ]
      ]
    },
    {
      "id": "def726f7ef99debf",
      "type": "join",
      "z": "73840c3923b28da6",
      "name": "",
      "mode": "custom",
      "build": "array",
      "property": "payload",
      "propertyType": "msg",
      "key": "topic",
      "joiner": "\\n",
      "joinerType": "str",
      "useparts": false,
      "accumulate": false,
      "timeout": "",
      "count": "2",
      "reduceRight": false,
      "reduceExp": "",
      "reduceInit": "",
      "reduceInitType": "",
      "reduceFixup": "",
      "x": 1230,
      "y": 580,
      "wires": [
        [
          "55dce80d3096d143",
          "07d8f3e880082d42"
        ]
      ]
    },
    {
      "id": "07d8f3e880082d42",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "增强实体列表",
      "func": "// 获取输入数据 - 假设 msg.payload 是一个数组,包含两个对象\nlet inputArray = msg.payload;\n\n// 解析两个数据源\nlet translatedData, entitiesData;\n\n// 处理输入数据格式\nif (Array.isArray(inputArray)) {\n    // 从数组中提取数据\n    translatedData = inputArray[0];\n    entitiesData = inputArray[1];\n    \n    // 如果是字符串,需要解析\n    if (typeof translatedData === 'string') {\n        translatedData = JSON.parse(translatedData);\n    }\n    if (typeof entitiesData === 'string') {\n        entitiesData = JSON.parse(entitiesData);\n    }\n} else {\n    msg.payload = {\n        error: \"输入数据格式不正确,需要数组格式\"\n    };\n    return msg;\n}\n\n// 提取翻译后的数据\nlet aiData;\nif (translatedData.success && translatedData.data) {\n    // 如果有嵌套的data字段\n    if (translatedData.data.choices) {\n        // OpenAI格式\n        const content = translatedData.data.message.content || translatedData.data.choices[0].message.content;\n        aiData = JSON.parse(content);\n    } else {\n        aiData = translatedData.data;\n    }\n} else {\n    aiData = translatedData;\n}\n\nconst floors = aiData.floors || [];\nconst rooms = aiData.rooms || [];\n\n// 提取实体数据\nconst entities = entitiesData.success ? entitiesData.data.entities : entitiesData.entities;\n\nif (!entities) {\n    msg.payload = {\n        error: \"无法找到实体数据\",\n        received: entitiesData\n    };\n    return msg;\n}\n\n// 创建楼层映射表 (使用原始楼层名称作为key)\nconst floorMap = {};\nfloors.forEach(floor => {\n    floorMap[floor.floor_name] = {\n        floor_name_en: floor.floor_name_en,\n        floor_type: floor.floor_type,\n        level: floor.level\n    };\n});\n\n// 创建房间映射表 (使用原始房间名称作为key)\nconst roomMap = {};\nrooms.forEach(room => {\n    roomMap[room.room_name] = {\n        room_name_en: room.room_name_en,\n        room_type: room.room_type\n    };\n});\n\n// 调试信息\nnode.warn(\"楼层映射表: \" + JSON.stringify(floorMap));\nnode.warn(\"房间映射表: \" + JSON.stringify(roomMap));\n\n// 遍历所有实体,补全数据\nconst updatedEntities = entities.map(entity => {\n    // 复制实体对象\n    let updatedEntity = {...entity};\n    \n    // 如果实体有楼层信息,补全楼层数据\n    if (updatedEntity.floor_name) {\n        const floorData = floorMap[updatedEntity.floor_name];\n        if (floorData) {\n            updatedEntity.floor_name_en = floorData.floor_name_en;\n            updatedEntity.floor_type = floorData.floor_type;\n            updatedEntity.level = floorData.level;\n        }\n    }\n    \n    // 如果实体有房间信息,补全房间数据\n    if (updatedEntity.room_name) {\n        const roomData = roomMap[updatedEntity.room_name];\n        if (roomData) {\n            updatedEntity.room_name_en = roomData.room_name_en;\n            updatedEntity.room_type = roomData.room_type;\n        }\n    }\n    \n    return updatedEntity;\n});\n\n// 输出结果\nmsg.payload = {\n    success: true,\n    data: {\n        entities: updatedEntities,\n        count: updatedEntities.length,\n        summary: {\n            total_entities: updatedEntities.length,\n            entities_with_floor_translation: updatedEntities.filter(e => e.floor_name_en).length,\n            entities_with_room_translation: updatedEntities.filter(e => e.room_name_en).length\n        }\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1400,
      "y": 580,
      "wires": [
        [
          "cce58a37ede3a3ef",
          "fefe6e47c45a42b8"
        ]
      ]
    },
    {
      "id": "ba677b67e967ef0d",
      "type": "join",
      "z": "73840c3923b28da6",
      "name": "",
      "mode": "custom",
      "build": "array",
      "property": "payload",
      "propertyType": "msg",
      "key": "topic",
      "joiner": "\\n",
      "joinerType": "str",
      "useparts": false,
      "accumulate": false,
      "timeout": "",
      "count": "2",
      "reduceRight": false,
      "reduceExp": "",
      "reduceInit": "",
      "reduceInitType": "",
      "reduceFixup": "",
      "x": 1010,
      "y": 240,
      "wires": [
        [
          "48dbd5e59a62898d",
          "21866d903f3738d2"
        ]
      ]
    },
    {
      "id": "cce58a37ede3a3ef",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 1",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1620,
      "y": 520,
      "wires": []
    },
    {
      "id": "08b6401e873c61a1",
      "type": "delay",
      "z": "73840c3923b28da6",
      "name": "",
      "pauseType": "delay",
      "timeout": "1",
      "timeoutUnits": "seconds",
      "rate": "1",
      "nbRateUnits": "1",
      "rateUnits": "second",
      "randomFirst": "1",
      "randomLast": "5",
      "randomUnits": "seconds",
      "drop": false,
      "allowrate": false,
      "outputs": 1,
      "x": 880,
      "y": 640,
      "wires": [
        [
          "db93d7ba82d7ae44"
        ]
      ]
    },
    {
      "id": "1bca42e13da5fbed",
      "type": "inject",
      "z": "73840c3923b28da6",
      "name": "",
      "props": [
        {
          "p": "payload"
        },
        {
          "p": "topic",
          "vt": "str"
        }
      ],
      "repeat": "",
      "crontab": "",
      "once": false,
      "onceDelay": 0.1,
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "x": 90,
      "y": 680,
      "wires": [
        [
          "260b8ec7da0bef86"
        ]
      ]
    },
    {
      "id": "260b8ec7da0bef86",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "提取增强实体列表数据",
      "func": "const cachedEntities = global.get(\"cached_entities\");\n\nif (cachedEntities) {\n    msg.payload = cachedEntities;\n} else {\n    msg.payload = [];\n    node.warn(\"没有缓存数据\");\n}\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 280,
      "y": 680,
      "wires": [
        [
          "82d568ebc70128cf"
        ]
      ]
    },
    {
      "id": "82d568ebc70128cf",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 8",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 480,
      "y": 680,
      "wires": []
    },
    {
      "id": "4c515d706748c50c",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "提取增强实体列表数据",
      "func": "const cachedEntities = global.get(\"cached_entities\");\n\nif (cachedEntities) {\n    msg.payload = cachedEntities;\n} else {\n    msg.payload = [];\n    node.warn(\"没有缓存数据\");\n}\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 820,
      "y": 300,
      "wires": [
        [
          "ba677b67e967ef0d"
        ]
      ]
    },
    {
      "id": "cbf61228432c6fa5",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 9",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1260,
      "y": 360,
      "wires": []
    },
    {
      "id": "48dbd5e59a62898d",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "匹配 Entities",
      "func": "/****************************************************\n * Node-RED Function: Intent × Entities Best Matcher\n * Version: bilingual-friendly + relaxed thresholds + full matched_devices\n * Desc  : 纯函数算法匹配（无大模型），从意图与实体清单中选出最佳控制目标\n * Input : msg.payload = [ intentObject, entitiesArray ]\n *         也可为字符串、类数组对象或 {intent, entities}，本函数会自动纠正\n * Output: msg.payload = {\n *   intent, user_input,\n *   actions: [{\n *     request: { floor, room, device_name, device_type, service, service_data },\n *     targets: [{\n *       entity_id, device_type, device_name, floor, room, score,\n *       matched: { floor:{text,hit,score}, room:{...}, device_name:{...}, device_type:{...} }\n *     }, ... up to K],\n *     disambiguation_required: boolean,\n *     warnings: [ ... ],\n *     suggestions_if_empty: [ {entity_id, device_name, room, floor, reason_score} ]\n *   }, ...],\n *   matched_devices: [ { entity_id, service, service_data }, ... ] // 汇总所有 action 的 TopK 命中\n * }\n ****************************************************/\n\n/* ===================== Ultra-robust payload normalizer ===================== */\nfunction isArrayLikeObject(o) {\n  if (!o || typeof o !== \"object\") return false;\n  const keys = Object.keys(o);\n  if (keys.length === 0) return false;\n  const numericKeys = keys.filter(k => /^\\d+$/.test(k)).map(k => Number(k)).sort((a,b)=>a-b);\n  if (numericKeys.length < 2) return false;\n  for (let i = 0; i < numericKeys.length; i++) {\n    if (numericKeys[i] !== i) return false;\n  }\n  return true;\n}\nfunction extractFirstBracketBlock(s) {\n  const start = s.indexOf('[');\n  const end   = s.lastIndexOf(']');\n  if (start === -1 || end === -1 || end <= start) return s;\n  return s.slice(start, end + 1);\n}\nfunction normalizePayload(x) {\n  // 1) 已是数组\n  if (Array.isArray(x)) return x;\n\n  // 2) 字符串 → JSON（剔除标题/噪音，只保留首尾中括号内）\n  if (typeof x === \"string\") {\n    const onlyJson = extractFirstBracketBlock(\n      x.replace(/\\r/g, \"\").replace(/\\n[ \\t]+/g, \"\\n\").trim()\n    );\n    try { const a = JSON.parse(onlyJson); if (Array.isArray(a)) return a; } catch(e) {}\n    try { const o = JSON.parse(onlyJson); if (o && o.intent && o.entities) return [o.intent, o.entities]; } catch(e) {}\n  }\n\n  // 3) { intent: {...}, entities: [...] }\n  if (x && typeof x === \"object\" && x.intent && x.entities) {\n    return [x.intent, x.entities];\n  }\n\n  // 4) 类数组对象 { \"0\": {...}, \"1\": [...] }\n  if (isArrayLikeObject(x)) {\n    const arr = [];\n    let i = 0;\n    while (String(i) in x) { arr.push(x[String(i)]); i++; }\n    return arr;\n  }\n\n  // 5) 再往里找一层常见字段\n  const cand = (x && (x.data || x.payload || x.body)) || null;\n  if (cand != null) return normalizePayload(cand);\n\n  return null;\n}\n\n/* === 入口解析：把 msg.payload 纠正成 [intent, entities] === */\nlet payload = normalizePayload(msg.payload);\nif (!Array.isArray(payload) || payload.length < 2) {\n  node.error(\"payload must be [intent, entities]\");\n  msg.payload = { error: \"payload must be [intent, entities]\" };\n  return msg;\n}\nlet intent = payload[0];\nlet entities = payload[1];\nif (typeof intent === \"string\")   { try { intent   = JSON.parse(intent);   } catch(e) {} }\nif (typeof entities === \"string\") { try { entities = JSON.parse(entities); } catch(e) {} }\nif (Array.isArray(entities) && entities.length === 1 && Array.isArray(entities[0])) {\n  entities = entities[0];\n}\nif (!intent || typeof intent !== \"object\") { msg.payload = { error: \"intent is not an object\" }; return msg; }\nif (!Array.isArray(entities))             { msg.payload = { error: \"entities is not an array\" }; return msg; }\n\n/* ===================== Normalization & Similarity ===================== */\n/* 拼音小字典（可扩展） */\nconst toPinyinMap = {\n  \"一楼\": \"yi lou\", \"二楼\": \"er lou\", \"三楼\": \"san lou\",\n  \"客厅\": \"ke ting\", \"卧室\": \"wo shi\", \"主卧\": \"zhu wo\",\n  \"书房\": \"shu fang\", \"餐厅\": \"can ting\", \"车库\": \"che ku\",\n  \"吸顶灯\": \"xi ding deng\", \"吊灯\": \"diao deng\",\n  \"氛围灯\": \"fen wei deng\", \"落地灯\": \"luo di deng\"\n};\n/* ✅ 中英双语映射（关键改动） */\nconst bilingualMap = {\n  \"一楼\": \"first floor\", \"二楼\": \"second floor\", \"三楼\": \"third floor\",\n  \"地下一层\": \"basement\",\n  \"客厅\": \"living room\", \"卧室\": \"bedroom\", \"书房\": \"study\",\n  \"餐厅\": \"dining room\", \"厨房\": \"kitchen\", \"车库\": \"garage\",\n  \"阳台\": \"balcony\"\n};\n\nfunction norm(s) {\n  if (!s) return \"\";\n  return String(s)\n    .toLowerCase()\n    .replace(/\\s+/g, \" \")\n    .replace(/[^\\p{L}\\p{N}\\s._-]/gu, \"\")\n    .trim();\n}\nfunction bilingualNorm(text) {\n  const t = norm(text);\n  const en = bilingualMap[text] || bilingualMap[t];\n  return en ? [t, norm(en)] : [t];\n}\nfunction addPinyinForms(text) {\n  const base = bilingualNorm(text);\n  const py = toPinyinMap[text] || toPinyinMap[base[0]] || \"\";\n  return py ? [...base, py] : base;\n}\n\n// 轻量 Jaro-Winkler\nfunction jaroWinkler(a, b) {\n  if (!a || !b) return 0;\n  if (a === b) return 1;\n  const md = Math.floor(Math.max(a.length, b.length) / 2) - 1;\n  const aM = new Array(a.length).fill(false);\n  const bM = new Array(b.length).fill(false);\n  let m = 0, t = 0;\n  for (let i = 0; i < a.length; i++) {\n    const start = Math.max(0, i - md);\n    const end = Math.min(i + md + 1, b.length);\n    for (let j = start; j < end; j++) {\n      if (bM[j]) continue;\n      if (a[i] !== b[j]) continue;\n      aM[i] = true; bM[j] = true; m++; break;\n    }\n  }\n  if (m === 0) return 0;\n  let k = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (!aM[i]) continue;\n    while (!bM[k]) k++;\n    if (a[i] !== b[k]) t++;\n    k++;\n  }\n  const jaro = (m / a.length + m / b.length + (m - t / 2) / m) / 3;\n  let p = 0; const maxP = 4;\n  for (let i = 0; i < Math.min(maxP, a.length, b.length); i++) {\n    if (a[i] === b[i]) p++; else break;\n  }\n  return jaro + p * 0.1 * (1 - jaro);\n}\nfunction multiSim(q, cands) {\n  const qs = addPinyinForms(q);\n  let best = 0;\n  for (const cand of cands) {\n    const cs = addPinyinForms(cand);\n    for (const q1 of qs) for (const c1 of cs) {\n      best = Math.max(best, jaroWinkler(q1, c1));\n    }\n  }\n  return best;\n}\n// {score, hit}\nfunction slotSim(queryText, ...candidateTexts) {\n  const q = queryText || \"\";\n  const cands = candidateTexts.filter(Boolean).map(String);\n  if (!q || cands.length === 0) return { score: 0, hit: \"\" };\n  let best = -1, bestHit = \"\";\n  for (const c of cands) {\n    const s = multiSim(q, [c]);\n    if (s > best) { best = s; bestHit = c; }\n  }\n  return { score: best, hit: bestHit };\n}\n\n/* ===================== Thresholds / Weights ===================== */\n/* ✅ 放宽阈值（关键改动）：更适配中英文混写 */\nconst TH = { floor: 0.70, room: 0.65, type: 0.75, name: 0.88 };\nconst W  = { F: 0.25, R: 0.25, N: 0.30, T: 0.20 };\n/* 你也可以将 BEST_K 调成 5，便于 matched_devices 收敛在少量高相关目标 */\nconst BEST_K = 8;\nconst DISAMBIG_GAP = 0.03;\n\n/* ===================== Triplet Scoring ===================== */\nfunction scoreTriplet(dev, e) {\n  const ev = {};\n\n  const floorQ = dev.floor_name || dev.floor_name_en || dev.floor_type || \"\";\n  const floorSim = slotSim(\n    floorQ,\n    e.floor_name, e.floor_name_en, e.floor_type, (e.level != null ? String(e.level) : null)\n  );\n  ev.floor = { text: floorQ, hit: floorSim.hit, score: floorSim.score };\n\n  const roomQ = dev.room_name || dev.room_name_en || dev.room_type || \"\";\n  const roomSim = slotSim(roomQ, e.room_name, e.room_name_en, e.room_type);\n  ev.room = { text: roomQ, hit: roomSim.hit, score: roomSim.score };\n\n  const nameQ = dev.device_name || dev.device_name_en || \"\";\n  const nameSim = slotSim(nameQ, e.device_name, e.attributes?.friendly_name);\n  ev.device_name = { text: nameQ, hit: nameSim.hit, score: nameSim.score };\n\n  const typeQ = (dev.device_type || \"\").toLowerCase() || (dev.service ? dev.service.split(\".\")[0].toLowerCase() : \"\");\n  const eType = (e.device_type || \"\").toLowerCase();\n  const typeSim = slotSim(typeQ, eType);\n  ev.device_type = { text: typeQ, hit: eType, score: typeSim.score };\n\n  // 槽位门槛（仅当用户有提供该槽位）\n  const floorPass = floorQ ? floorSim.score >= TH.floor : true;\n  const roomPass  = roomQ  ? roomSim.score  >= TH.room  : true;\n  const namePass  = nameQ  ? nameSim.score  >= TH.name  : true;\n  const typePass  = typeQ  ? typeSim.score  >= TH.type  : true;\n\n  if (!(floorPass && roomPass && (namePass || typePass))) {\n    return { score: -1, ev, warnings: [] };\n  }\n\n  let base =\n    W.F * floorSim.score +\n    W.R * roomSim.score +\n    W.N * (nameQ ? nameSim.score : 0.85 * nameSim.score) +\n    W.T * typeSim.score;\n\n  const warnings = [];\n  // 能力一致性：service 域与实体类型\n  if (dev.service) {\n    const svcDomain = dev.service.split(\".\")[0].toLowerCase();\n    if (svcDomain && eType) {\n      if (svcDomain === eType) base += 0.05;\n      else warnings.push(`Service domain \"${svcDomain}\" ≠ entity type \"${eType}\" for ${e.entity_id}`);\n    }\n  }\n\n  return { score: base, ev, warnings };\n}\n\n/* ===================== Matching Pipeline ===================== */\nfunction matchEntities(intent, allEntities) {\n  const out = {\n    intent: intent.intent,\n    user_input: intent.user_input,\n    actions: [],\n    matched_devices: []   // 汇总当前所有 action 的 TopK 目标（不只 Top1）\n  };\n\n  const devices = Array.isArray(intent.devices) ? intent.devices : [];\n  for (const dev of devices) {\n    const svcDomain = dev.service ? dev.service.split(\".\")[0].toLowerCase() : ((dev.device_type || \"\").toLowerCase());\n\n    // 宽召回：同域优先；若无域但给了名字，也放行\n    const pool = allEntities.filter(e => {\n      if (!svcDomain) return true;\n      const eType = (e.device_type || \"\").toLowerCase();\n      return (eType === svcDomain) || !!dev.device_name || !!dev.device_name_en;\n    });\n\n    // 打分\n    const scored = pool.map(e => {\n      const { score, ev, warnings } = scoreTriplet(dev, e);\n      return { e, score, ev, warnings };\n    }).filter(x => x.score >= 0);\n\n    // 排序 & TopK\n    scored.sort((a, b) => b.score - a.score);\n    const topK = scored.slice(0, BEST_K);\n\n    // warnings 汇总\n    const warnings = [];\n    for (const item of topK) {\n      for (const w of item.warnings) warnings.push(w);\n    }\n\n    // ✅ 新逻辑：把本 action 的 TopK 全部加入 matched_devices（解决“客厅三盏灯”）\n    if (topK.length > 0) {\n      for (const item of topK) {\n        out.matched_devices.push({\n          entity_id: item.e.entity_id,\n          service: dev.service || null,\n          service_data: dev.service_data || {}\n        });\n      }\n    }\n\n    // 空匹配建议（宽松权重）\n    let suggestions = [];\n    if (topK.length === 0) {\n      const floorQ = dev.floor_name || dev.floor_name_en || dev.floor_type || \"\";\n      const roomQ  = dev.room_name  || dev.room_name_en  || dev.room_type  || \"\";\n      const nameQ  = dev.device_name || dev.device_name_en || \"\";\n      const typeQ  = (dev.device_type || \"\").toLowerCase() || (dev.service ? dev.service.split(\".\")[0].toLowerCase() : \"\");\n\n      const loose = pool.map(e => {\n        const eType = (e.device_type || \"\").toLowerCase();\n        const s =\n          0.25 * slotSim(floorQ, e.floor_name, e.floor_name_en, e.floor_type).score +\n          0.25 * slotSim(roomQ,  e.room_name,  e.room_name_en,  e.room_type).score +\n          0.30 * slotSim(nameQ,  e.device_name, e.attributes?.friendly_name).score +\n          0.20 * slotSim(typeQ,  eType).score;\n        return { e, s };\n      }).sort((a, b) => b.s - a.s).slice(0, 3);\n\n      suggestions = loose.map(x => ({\n        entity_id: x.e.entity_id,\n        device_name: x.e.device_name ?? x.e.attributes?.friendly_name ?? \"\",\n        room: x.e.room_name_en ?? x.e.room_name ?? \"\",\n        floor: x.e.floor_name_en ?? x.e.floor_name ?? \"\",\n        reason_score: Number(x.s.toFixed(3))\n      }));\n    }\n\n    // 组装 action（保持结构不变）\n    out.actions.push({\n      request: {\n        floor: dev.floor_name || dev.floor_name_en || dev.floor_type || null,\n        room:  dev.room_name  || dev.room_name_en  || dev.room_type  || null,\n        device_name: dev.device_name || dev.device_name_en || null,\n        device_type: (dev.device_type || (dev.service ? dev.service.split(\".\")[0] : null))?.toLowerCase() || null,\n        service: dev.service || null,\n        service_data: dev.service_data || {}\n      },\n      targets: topK.map(item => ({\n        entity_id: item.e.entity_id,\n        device_type: (item.e.device_type || \"\").toLowerCase(),\n        device_name: item.e.device_name ?? item.e.attributes?.friendly_name ?? \"\",\n        floor: item.e.floor_name_en ?? item.e.floor_name ?? \"\",\n        room: item.e.room_name_en ?? item.e.room_name ?? \"\",\n        score: Number(item.score.toFixed(3)),\n        matched: {\n          floor: item.ev.floor,\n          room: item.ev.room,\n          device_name: item.ev.device_name,\n          device_type: item.ev.device_type\n        }\n      })),\n      disambiguation_required:\n        topK.length >= 2 && (topK[0].score - topK[1].score) < DISAMBIG_GAP,\n      warnings,\n      suggestions_if_empty: suggestions\n    });\n  }\n\n  // 兜底保证存在\n  if (!Array.isArray(out.matched_devices)) out.matched_devices = [];\n\n  return out;\n}\n\n/* ===================== Execute ===================== */\ntry {\n  const result = matchEntities(intent, entities);\n  msg.payload = result;\n  return msg;\n} catch (err) {\n  node.error(err.message || String(err), err);\n  msg.payload = { error: String(err) };\n  return msg;\n}\n",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1150,
      "y": 240,
      "wires": [
        [
          "cbf61228432c6fa5",
          "1402fea6e4aa7b01"
        ]
      ]
    },
    {
      "id": "87b75819e7854a33",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "获取空间列表",
      "method": "GET",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/spaces",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 240,
      "y": 580,
      "wires": [
        [
          "000912f60cf7f61b",
          "900794d2d983209c"
        ]
      ]
    },
    {
      "id": "000912f60cf7f61b",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 3",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 460,
      "y": 520,
      "wires": []
    },
    {
      "id": "900794d2d983209c",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "function 1",
      "func": "// 获取输入的数据\nlet inputData = msg.payload;\n\n// 如果payload是字符串,先解析成JSON\nif (typeof inputData === 'string') {\n    try {\n        inputData = JSON.parse(inputData);\n    } catch (e) {\n        msg.payload = {\n            error: \"JSON解析失败: \" + e.message\n        };\n        return msg;\n    }\n}\n\n// 检查数据格式是否正确\nif (!inputData || !inputData.success || !inputData.data || !inputData.data.floors) {\n    msg.payload = {\n        error: \"数据格式不正确\",\n        received: inputData\n    };\n    return msg;\n}\n\n// 初始化结果数组\nlet floors = [];\nlet rooms = [];\n\n// 遍历所有楼层\ninputData.data.floors.forEach(floor => {\n    // 添加楼层名称\n    floors.push(floor.name);\n    \n    // 遍历该楼层的所有房间\n    if (floor.rooms && floor.rooms.length > 0) {\n        floor.rooms.forEach(room => {\n            rooms.push(room.name);\n        });\n    }\n});\n\n// 输出结果\nmsg.payload = {\n    floors: floors,\n    rooms: rooms\n};\n\nreturn msg;",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 400,
      "y": 580,
      "wires": [
        [
          "a8a4d3c604863f01",
          "89ddaf12515418b7"
        ]
      ]
    },
    {
      "id": "5784646f83035a30",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 7",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1040,
      "y": 520,
      "wires": []
    },
    {
      "id": "2aa8dfe8c8fe4859",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "对实体进行控制",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/batch-control",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 1680,
      "y": 260,
      "wires": [
        [
          "882ed8db4fe3c018"
        ]
      ]
    },
    {
      "id": "21baa26c971c7c00",
      "type": "change",
      "z": "73840c3923b28da6",
      "name": "提取控制实体列表",
      "rules": [
        {
          "t": "set",
          "p": "payload",
          "pt": "msg",
          "to": "payload.matched_devices",
          "tot": "msg"
        }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 1490,
      "y": 260,
      "wires": [
        [
          "2aa8dfe8c8fe4859"
        ]
      ]
    },
    {
      "id": "794d46c338e51b96",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 10",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 2220,
      "y": 360,
      "wires": []
    },
    {
      "id": "882ed8db4fe3c018",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "",
      "pretty": false,
      "x": 1830,
      "y": 260,
      "wires": [
        [
          "d047862c48f7b75a",
          "eee3951edf1e95c8"
        ]
      ]
    },
    {
      "id": "d047862c48f7b75a",
      "type": "change",
      "z": "73840c3923b28da6",
      "name": "提取实体列表",
      "rules": [
        {
          "t": "set",
          "p": "payload",
          "pt": "msg",
          "to": "payload.data.results",
          "tot": "msg"
        }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 1980,
      "y": 260,
      "wires": [
        [
          "0b87958314e49e8c",
          "794d46c338e51b96"
        ]
      ]
    },
    {
      "id": "0b87958314e49e8c",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "查询实体状态",
      "method": "POST",
      "ret": "txt",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/home_assistant/home_assistant/batch-states",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "other",
          "keyValue": "Content-Type",
          "valueType": "other",
          "valueValue": "application/json"
        }
      ],
      "x": 2220,
      "y": 180,
      "wires": [
        [
          "d62e9d8d039bf06b",
          "ea54b17bab992eab"
        ]
      ]
    },
    {
      "id": "d62e9d8d039bf06b",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 12",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 2380,
      "y": 260,
      "wires": []
    },
    {
      "id": "eee3951edf1e95c8",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 13",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 2020,
      "y": 360,
      "wires": []
    },
    {
      "id": "27ab2cfcd2e6e47e",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 11",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 2580,
      "y": 260,
      "wires": []
    },
    {
      "id": "7eb7133c837e7303",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "Telegram 快速回复",
      "method": "POST",
      "ret": "obj",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/telegram/telegram/reply/last",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "Content-Type",
          "keyValue": "",
          "valueType": "application/json",
          "valueValue": ""
        }
      ],
      "x": 2710,
      "y": 180,
      "wires": [
        []
      ]
    },
    {
      "id": "03d7e47c5da20169",
      "type": "http request",
      "z": "73840c3923b28da6",
      "name": "Telegram 快速回复",
      "method": "POST",
      "ret": "obj",
      "paytoqs": "ignore",
      "url": "http://localhost:3000/api/telegram/telegram/reply/last",
      "tls": "",
      "persist": false,
      "proxy": "",
      "insecureHTTPParser": false,
      "authType": "",
      "senderr": false,
      "headers": [
        {
          "keyType": "Content-Type",
          "keyValue": "",
          "valueType": "application/json",
          "valueValue": ""
        }
      ],
      "x": 1390,
      "y": 100,
      "wires": [
        []
      ]
    },
    {
      "id": "051ec9baf40fb1a7",
      "type": "change",
      "z": "73840c3923b28da6",
      "name": "提取控制实体列表",
      "rules": [
        {
          "t": "set",
          "p": "payload",
          "pt": "msg",
          "to": "payload.matched_devices",
          "tot": "msg"
        }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 1490,
      "y": 180,
      "wires": [
        [
          "0b87958314e49e8c"
        ]
      ]
    },
    {
      "id": "98ea58fe8bc05a0a",
      "type": "change",
      "z": "73840c3923b28da6",
      "name": "提取用户回复",
      "rules": [
        {
          "t": "set",
          "p": "payload",
          "pt": "msg",
          "to": "payload.user_responds",
          "tot": "msg"
        }
      ],
      "action": "",
      "property": "",
      "from": "",
      "to": "",
      "reg": false,
      "x": 1040,
      "y": 100,
      "wires": [
        [
          "128199d4735042f4"
        ]
      ]
    },
    {
      "id": "21866d903f3738d2",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 2",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1060,
      "y": 360,
      "wires": []
    },
    {
      "id": "682a0cb7fd078113",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 4",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 300,
      "y": 160,
      "wires": []
    },
    {
      "id": "9b664e50e0530fd9",
      "type": "json",
      "z": "73840c3923b28da6",
      "name": "",
      "property": "payload",
      "action": "obj",
      "pretty": false,
      "x": 290,
      "y": 240,
      "wires": [
        [
          "dd1ac6ff6524b02f"
        ]
      ]
    },
    {
      "id": "3ff597c4d0e14f71",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 14",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 800,
      "y": 160,
      "wires": []
    },
    {
      "id": "b110807b0793af0a",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 15",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 620,
      "y": 160,
      "wires": []
    },
    {
      "id": "b5d6210da1507894",
      "type": "debug",
      "z": "73840c3923b28da6",
      "name": "debug 16",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "false",
      "statusVal": "",
      "statusType": "auto",
      "x": 1040,
      "y": 160,
      "wires": []
    },
    {
      "id": "128199d4735042f4",
      "type": "function",
      "z": "73840c3923b28da6",
      "name": "提取AI回复",
      "func": "\n  const text = msg.payload;\n  msg.payload = { text };\n  return msg;\n",
      "outputs": 1,
      "timeout": 0,
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 1210,
      "y": 100,
      "wires": [
        [
          "03d7e47c5da20169"
        ]
      ]
    },
    {
      "id": "dba62f21078ec8cd",
      "type": "delay",
      "z": "73840c3923b28da6",
      "name": "",
      "pauseType": "delay",
      "timeout": "1",
      "timeoutUnits": "seconds",
      "rate": "1",
      "nbRateUnits": "1",
      "rateUnits": "second",
      "randomFirst": "1",
      "randomLast": "5",
      "randomUnits": "seconds",
      "drop": false,
      "allowrate": false,
      "outputs": 1,
      "x": 2540,
      "y": 180,
      "wires": [
        [
          "7eb7133c837e7303"
        ]
      ]
    }
  ],
  "timestamp": "2025-10-15T04:45:56.572Z",
  "version": "1.0"
}