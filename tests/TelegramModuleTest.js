const BaseModuleTest = require('./BaseModuleTest');
const TelegramModule = require('../modules/telegram/TelegramModule');

/**
 * TelegramModuleTest - TelegramÊ®°ÂùóÁâπÂÆöÊµãËØï
 */
class TelegramModuleTest extends BaseModuleTest {
    constructor() {
        super('telegram', TelegramModule);
    }

    /**
     * ËøêË°åTelegramÁâπÂÆöÊµãËØï
     */
    async runModuleSpecificTests() {
        const telegramTests = [
            { name: 'Bot Token Format Validation', test: () => this.testBotTokenFormat() },
            { name: 'API Call Structure', test: () => this.testApiCallStructure() },
            { name: 'Error Response Handling', test: () => this.testErrorResponseHandling() },
            { name: 'Bot Info Retrieval', test: () => this.testBotInfoRetrieval() },
            { name: 'Connection Test Functionality', test: () => this.testConnectionTestFunctionality() },
            { name: 'Webhook Info Support', test: () => this.testWebhookInfoSupport() }
        ];

        for (const testCase of telegramTests) {
            await this.runSingleTest(testCase.name, testCase.test);
        }
    }

    /**
     * ÊµãËØïBot TokenÊ†ºÂºèÈ™åËØÅ
     */
    async testBotTokenFormat() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // ÊµãËØïÊúâÊïàÁöÑtokenÊ†ºÂºè
        const validTokens = [
            '7515466050:AAEoO05o3pM2tJ33DltWQgPCSJNpNSBGcvQ',
            '123456789:ABCdefGHIjklMNOpqrsTUVwxyz'
        ];
        
        for (const token of validTokens) {
            const result = this.moduleInstance.validateCredentialsFormat({ bot_token: token });
            this.assert(result.valid === true, `Valid token format should pass: ${token}`);
        }
        
        // ÊµãËØïÊó†ÊïàÁöÑtokenÊ†ºÂºè
        const invalidTokens = [
            'invalid-token',
            '123456789',
            'ABCdefGHIjklMNOpqrsTUVwxyz',
            '123456789:',
            ':ABCdefGHIjklMNOpqrsTUVwxyz',
            '123456789-ABCdefGHIjklMNOpqrsTUVwxyz'
        ];
        
        for (const token of invalidTokens) {
            const result = this.moduleInstance.validateCredentialsFormat({ bot_token: token });
            this.assert(result.valid === false, `Invalid token format should fail: ${token}`);
        }
    }

    /**
     * ÊµãËØïAPIË∞ÉÁî®ÁªìÊûÑ
     */
    async testApiCallStructure() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // Ê£ÄÊü•APIË∞ÉÁî®ÊñπÊ≥ïÂ≠òÂú®
        this.assert(typeof this.moduleInstance.callTelegramAPI === 'function', 'callTelegramAPI method should exist');
        
        // Ê£ÄÊü•ÈªòËÆ§ÈÖçÁΩÆ
        const config = this.moduleInstance.config;
        this.assert(config.apiBaseUrl === 'https://api.telegram.org', 'API base URL should be set correctly');
        this.assert(typeof config.timeout === 'number', 'Timeout should be a number');
        this.assert(config.timeout > 0, 'Timeout should be positive');
    }

    /**
     * ÊµãËØïÈîôËØØÂìçÂ∫îÂ§ÑÁêÜ
     */
    async testErrorResponseHandling() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // ÊµãËØïÁ©∫token
        const emptyTokenResult = await this.moduleInstance.performValidation({});
        this.assert(emptyTokenResult.success === false, 'Empty credentials should fail');
        this.assert(emptyTokenResult.error === 'Bot token is required', 'Should show correct error message');
        this.assert(emptyTokenResult.details.field === 'bot_token', 'Should identify the missing field');
        
        // ÊµãËØïÊ†ºÂºèÈîôËØØÁöÑtoken
        const invalidTokenResult = await this.moduleInstance.performValidation({ bot_token: 'invalid' });
        this.assert(invalidTokenResult.success === false, 'Invalid token format should fail validation');
    }

    /**
     * ÊµãËØïBot‰ø°ÊÅØËé∑ÂèñÂäüËÉΩ
     */
    async testBotInfoRetrieval() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // Ê£ÄÊü•getBotInfoÊñπÊ≥ïÂ≠òÂú®
        this.assert(typeof this.moduleInstance.getBotInfo === 'function', 'getBotInfo method should exist');
        
        // ÊµãËØïÊó†Âá≠ÊçÆÊÉÖÂÜµ
        const noCreds = await this.moduleInstance.getBotInfo();
        this.assert(noCreds.success === false, 'getBotInfo without credentials should fail');
    }

    /**
     * ÊµãËØïËøûÊé•ÊµãËØïÂäüËÉΩ
     */
    async testConnectionTestFunctionality() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // Ê£ÄÊü•testConnectionÊñπÊ≥ïÂ≠òÂú®
        this.assert(typeof this.moduleInstance.testConnection === 'function', 'testConnection method should exist');
        
        // ÊµãËØïÊó†Âá≠ÊçÆÊÉÖÂÜµ
        const noCredsResult = await this.moduleInstance.testConnection();
        this.assert(noCredsResult.success === false, 'Connection test without credentials should fail');
        this.assert(noCredsResult.error === 'No credentials found', 'Should show correct error message');
    }

    /**
     * ÊµãËØïWebhook‰ø°ÊÅØÊîØÊåÅ
     */
    async testWebhookInfoSupport() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // Ê£ÄÊü•ÈÖçÁΩÆ‰∏≠ÊòØÂê¶ÂêØÁî®‰∫ÜwebhookÂäüËÉΩ
        const config = this.moduleInstance.config;
        this.assert(config.features !== undefined, 'Features configuration should exist');
        this.assert(config.features.webhookInfo === true, 'Webhook info feature should be enabled');
    }

    /**
     * ÊµãËØïSchemaÁªìÊûÑ
     */
    async testSchemaValidation() {
        await super.testSchemaValidation();
        
        // TelegramÁâπÂÆöschemaÈ™åËØÅ
        const schema = this.moduleInstance.getCredentialSchema();
        
        // Ê£ÄÊü•bot_tokenÂ≠óÊÆµ
        this.assert(schema.properties.bot_token !== undefined, 'Schema should define bot_token field');
        this.assert(schema.properties.bot_token.type === 'string', 'bot_token should be string type');
        this.assert(schema.properties.bot_token.required === true, 'bot_token should be required');
        this.assert(schema.properties.bot_token.sensitive === true, 'bot_token should be marked as sensitive');
        this.assert(schema.properties.bot_token.pattern !== undefined, 'bot_token should have pattern validation');
        
        // Ê£ÄÊü•ÂøÖÈúÄÂ≠óÊÆµ
        this.assert(schema.required.includes('bot_token'), 'bot_token should be in required fields');
    }

    /**
     * Ëé∑ÂèñÊµãËØïÂá≠ÊçÆ
     */
    getTestCredentials() {
        // ‰ΩøÁî®ÁúüÂÆûÁöÑbot tokenËøõË°åÊµãËØï
        return {
            bot_token: '7515466050:AAEoO05o3pM2tJ33DltWQgPCSJNpNSBGcvQ'
        };
    }

    /**
     * Ëé∑ÂèñÊó†ÊïàÊµãËØïÂá≠ÊçÆ
     */
    getInvalidTestCredentials() {
        return {
            bot_token: 'invalid-token-format'
        };
    }

    /**
     * Ê£ÄÊü•ÊòØÂê¶ÊúâÊúâÊïàÁöÑÊµãËØïÂá≠ÊçÆÔºàÁé∞Âú®‰ΩøÁî®ÁúüÂÆûtokenÔºâ
     */
    hasValidTestCredentials() {
        // ËøîÂõûtrueÔºåÂõ†‰∏∫Êàë‰ª¨Áé∞Âú®ÊúâÁúüÂÆûÁöÑtokenÂèØ‰ª•ËøõË°åAPIË∞ÉÁî®ÊµãËØï
        return true;
    }

    /**
     * ÊµãËØïÂÆåÊï¥Â∑•‰ΩúÊµÅÁ®ãÔºàÈáçÂÜô‰ª•ÈÅøÂÖçÂÆûÈôÖAPIË∞ÉÁî®Ôºâ
     */
    async testFullWorkflow() {
        this.assert(this.moduleInstance !== null, 'Module instance must exist');
        
        // 1. ÈáçÊñ∞ÂàùÂßãÂåñ
        const initResult = await this.moduleInstance.initialize();
        this.assert(initResult.success === true, 'Initialization should succeed');
        
        // 2. ÂêØÁî®Ê®°Âùó
        const enableResult = await this.moduleInstance.enable();
        this.assert(enableResult.success === true, 'Module enabling should succeed');
        
        // 3. ËÆæÁΩÆÂá≠ÊçÆ
        const testCredentials = this.getTestCredentials();
        const setResult = await this.moduleInstance.setCredentials(testCredentials);
        this.assert(setResult.success === true, 'Setting credentials should succeed');
        
        // 4. Ëé∑ÂèñÂá≠ÊçÆ
        const getResult = await this.moduleInstance.getCredentials();
        this.assert(getResult.success === true, 'Getting credentials should succeed');
        this.assert(getResult.data.bot_token === testCredentials.bot_token, 'Retrieved credentials should match set credentials');
        
        // 5. ÊµãËØïÊ†ºÂºèÈ™åËØÅ
        const formatResult = this.moduleInstance.validateCredentialsFormat(testCredentials);
        this.assert(formatResult.valid === true, 'Test credentials should pass format validation');
        
        // 6. Ê∏ÖÈô§ÁºìÂ≠ò
        const cacheResult = this.moduleInstance.clearCache();
        this.assert(cacheResult.success === true, 'Cache clearing should succeed');
        
        // 7. Á¶ÅÁî®Ê®°Âùó
        const disableResult = await this.moduleInstance.disable();
        this.assert(disableResult.success === true, 'Module disabling should succeed');
    }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ÔºåÊâßË°åÊµãËØï
if (require.main === module) {
    const test = new TelegramModuleTest();
    
    test.runAllTests()
        .then(report => {
            console.log('\nüéâ Test completed!');
            
            // ‰øùÂ≠òÊµãËØïÊä•Âëä
            test.saveTestReport(report)
                .then(filepath => {
                    if (filepath) {
                        console.log(`üìÑ Report saved to: ${filepath}`);
                    }
                    
                    // ÈÄÄÂá∫ËøõÁ®ãÔºå‰ΩøÁî®ÈÄÇÂΩìÁöÑÈÄÄÂá∫Á†Å
                    process.exit(report.summary.failed > 0 ? 1 : 0);
                });
        })
        .catch(error => {
            console.error('‚ùå Test execution failed:', error);
            process.exit(1);
        });
}

module.exports = TelegramModuleTest;